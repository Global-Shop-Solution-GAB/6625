Program.Sub.ScreenSU.Start
Gui.f_Main..Create(BaseForm)
Gui.f_Main..Caption("Trade Compliance Admin Dashboard (6625)")
Gui.f_Main..Size(1594,845)
Gui.f_Main..MinX(0)
Gui.f_Main..MinY(0)
Gui.f_Main..Position(0,0)
Gui.f_Main..AlwaysOnTop(False)
Gui.f_Main..FontName("Tahoma")
Gui.f_Main..FontSize(8.25)
Gui.f_Main..ControlBox(True)
Gui.f_Main..MaxButton(True)
Gui.f_Main..MinButton(True)
Gui.f_Main..MousePointer(0)
Gui.f_Main..Moveable(True)
Gui.f_Main..Sizeable(True)
Gui.f_Main..ShowInTaskBar(True)
Gui.f_Main..TitleBar(True)
Gui.f_Main..Event(UnLoad,f_Main_UnLoad)
Gui.f_Main.SearchSplitter.Create(SplitContainer)
Gui.f_Main.SearchSplitter.Enabled(True)
Gui.f_Main.SearchSplitter.Visible(True)
Gui.f_Main.SearchSplitter.Zorder(0)
Gui.f_Main.SearchSplitter.Size(1594,815)
Gui.f_Main.SearchSplitter.Position(0,0)
Gui.f_Main.SearchSplitter.Orientation(0)
Gui.f_Main.SearchSplitter.SplitterPosition(172)
Gui.f_Main.SearchSplitter.Collapsed(False)
Gui.f_Main.SearchSplitter.Dock(5)
Gui.f_Main.cmdPackList.Create(Button)
Gui.f_Main.cmdPackList.Enabled(True)
Gui.f_Main.cmdPackList.Visible(True)
Gui.f_Main.cmdPackList.Zorder(0)
Gui.f_Main.cmdPackList.Size(30,23)
Gui.f_Main.cmdPackList.Position(134,172)
Gui.f_Main.cmdPackList.Caption("^")
Gui.f_Main.cmdPackList.FontName("Tahoma")
Gui.f_Main.cmdPackList.FontSize(8.25)
Gui.f_Main.cmdPackList.Parent("SearchSplitter",0)
Gui.f_Main.cmdPackList.Anchor(9)
Gui.f_Main.cmdPackList.Event(Click,cmdPackList_Click)
Gui.f_Main.cmdPackList.TabStop(True)
Gui.f_Main.cmdPackList.TabIndex(10)
Gui.f_Main.txtPackList.Create(TextBox,"",True,119,20,0,11,174,True,0,"Tahoma",8.25,,1)
Gui.f_Main.txtPackList.Parent("SearchSplitter",0)
Gui.f_Main.txtPackList.Anchor(13)
Gui.f_Main.txtPackList.TabStop(True)
Gui.f_Main.txtPackList.TabIndex(9)
Gui.f_Main.cmdOrdSrch.Create(Button)
Gui.f_Main.cmdOrdSrch.Enabled(True)
Gui.f_Main.cmdOrdSrch.Visible(True)
Gui.f_Main.cmdOrdSrch.Zorder(0)
Gui.f_Main.cmdOrdSrch.Size(30,23)
Gui.f_Main.cmdOrdSrch.Position(134,102)
Gui.f_Main.cmdOrdSrch.Caption("^")
Gui.f_Main.cmdOrdSrch.FontName("Tahoma")
Gui.f_Main.cmdOrdSrch.FontSize(8.25)
Gui.f_Main.cmdOrdSrch.Parent("SearchSplitter",0)
Gui.f_Main.cmdOrdSrch.Anchor(9)
Gui.f_Main.cmdOrdSrch.Event(Click,cmdOrdSrch_Click)
Gui.f_Main.cmdOrdSrch.TabStop(True)
Gui.f_Main.cmdOrdSrch.TabIndex(4)
Gui.f_Main.lblOrderSrch.Create(Label,"Order Number:",True,72,13,0,11,85,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblOrderSrch.BorderStyle(0)
Gui.f_Main.lblOrderSrch.Parent("SearchSplitter",0)
Gui.f_Main.txtCustSrch.Create(TextBox,"",True,119,20,0,11,32,True,0,"Tahoma",8.25,,1)
Gui.f_Main.txtCustSrch.Parent("SearchSplitter",0)
Gui.f_Main.txtCustSrch.Anchor(13)
Gui.f_Main.txtCustSrch.TabStop(True)
Gui.f_Main.txtCustSrch.TabIndex(1)
Gui.f_Main.lbl1VendSrch.Create(Label,"Vendor:",True,38,13,0,11,227,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lbl1VendSrch.BorderStyle(0)
Gui.f_Main.lbl1VendSrch.Parent("SearchSplitter",0)
Gui.f_Main.cmdSearch.Create(Button)
Gui.f_Main.cmdSearch.Enabled(True)
Gui.f_Main.cmdSearch.Visible(True)
Gui.f_Main.cmdSearch.Zorder(0)
Gui.f_Main.cmdSearch.Size(154,23)
Gui.f_Main.cmdSearch.Position(11,788)
Gui.f_Main.cmdSearch.Caption("Filter Results")
Gui.f_Main.cmdSearch.FontName("Tahoma")
Gui.f_Main.cmdSearch.FontSize(8.25)
Gui.f_Main.cmdSearch.Anchor(14)
Gui.f_Main.cmdSearch.Parent("SearchSplitter",0)
Gui.f_Main.cmdSearch.Event(Click,cmdSearch_Click)
Gui.f_Main.cmdSearch.TabStop(True)
Gui.f_Main.cmdSearch.TabIndex(13)
Gui.f_Main.txtOrderSrch.Create(TextBox,"",True,119,20,0,11,103,True,0,"Tahoma",8.25,,1)
Gui.f_Main.txtOrderSrch.Parent("SearchSplitter",0)
Gui.f_Main.txtOrderSrch.Anchor(13)
Gui.f_Main.txtOrderSrch.TabStop(True)
Gui.f_Main.txtOrderSrch.TabIndex(3)
Gui.f_Main.cmdVendSrch.Create(Button)
Gui.f_Main.cmdVendSrch.Enabled(True)
Gui.f_Main.cmdVendSrch.Visible(True)
Gui.f_Main.cmdVendSrch.Zorder(0)
Gui.f_Main.cmdVendSrch.Size(30,23)
Gui.f_Main.cmdVendSrch.Position(134,244)
Gui.f_Main.cmdVendSrch.Caption("^")
Gui.f_Main.cmdVendSrch.FontName("Tahoma")
Gui.f_Main.cmdVendSrch.FontSize(8.25)
Gui.f_Main.cmdVendSrch.Anchor(9)
Gui.f_Main.cmdVendSrch.Parent("SearchSplitter",0)
Gui.f_Main.cmdVendSrch.Event(Click,cmdVendSrch_Click)
Gui.f_Main.cmdVendSrch.TabStop(True)
Gui.f_Main.cmdVendSrch.TabIndex(12)
Gui.f_Main.lblCustSrch.Create(Label,"Customer:",True,50,13,0,11,13,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblCustSrch.BorderStyle(0)
Gui.f_Main.lblCustSrch.Parent("SearchSplitter",0)
Gui.f_Main.lblPackList.Create(Label,"Packing List:",True,59,13,0,11,156,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblPackList.BorderStyle(0)
Gui.f_Main.lblPackList.Parent("SearchSplitter",0)
Gui.f_Main.txtVendSrch.Create(TextBox,"",True,119,20,0,11,245,True,0,"Tahoma",8.25,,1)
Gui.f_Main.txtVendSrch.Parent("SearchSplitter",0)
Gui.f_Main.txtVendSrch.Anchor(13)
Gui.f_Main.txtVendSrch.TabStop(True)
Gui.f_Main.txtVendSrch.TabIndex(11)
Gui.f_Main.cmdCustSrch.Create(Button)
Gui.f_Main.cmdCustSrch.Enabled(True)
Gui.f_Main.cmdCustSrch.Visible(True)
Gui.f_Main.cmdCustSrch.Zorder(0)
Gui.f_Main.cmdCustSrch.Size(30,23)
Gui.f_Main.cmdCustSrch.Position(134,30)
Gui.f_Main.cmdCustSrch.Caption("^")
Gui.f_Main.cmdCustSrch.FontName("Tahoma")
Gui.f_Main.cmdCustSrch.FontSize(8.25)
Gui.f_Main.cmdCustSrch.Parent("SearchSplitter",0)
Gui.f_Main.cmdCustSrch.Anchor(9)
Gui.f_Main.cmdCustSrch.Event(Click,cmdCustSrch_Click)
Gui.f_Main.cmdCustSrch.TabStop(True)
Gui.f_Main.cmdCustSrch.TabIndex(2)
Gui.f_Main.Splitter.Create(SplitContainer)
Gui.f_Main.Splitter.Enabled(True)
Gui.f_Main.Splitter.Visible(True)
Gui.f_Main.Splitter.Zorder(0)
Gui.f_Main.Splitter.Size(1328,794)
Gui.f_Main.Splitter.Position(0,0)
Gui.f_Main.Splitter.Orientation(1)
Gui.f_Main.Splitter.SplitterPosition(389)
Gui.f_Main.Splitter.Collapsed(False)
Gui.f_Main.Splitter.Dock(5)
Gui.f_Main.Splitter.Parent("SearchSplitter",1)
Gui.f_Main.lblShipments.Create(Label,"Staged Shipments:",True,90,13,0,734,8,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblShipments.BorderStyle(0)
Gui.f_Main.lblShipments.Parent("Splitter",1)
Gui.f_Main.GsGCShipment.Create(GsGridControl)
Gui.f_Main.GsGCShipment.Enabled(True)
Gui.f_Main.GsGCShipment.Visible(True)
Gui.f_Main.GsGCShipment.Zorder(0)
Gui.f_Main.GsGCShipment.Size(670,367)
Gui.f_Main.GsGCShipment.Position(734,25)
Gui.f_Main.GsGCShipment.Parent("Splitter",1)
Gui.f_Main.GsGCShipment.Anchor(15)
Gui.f_Main.GsGcVendor.Create(GsGridControl)
Gui.f_Main.GsGcVendor.Enabled(True)
Gui.f_Main.GsGcVendor.Visible(True)
Gui.f_Main.GsGcVendor.Zorder(0)
Gui.f_Main.GsGcVendor.Size(670,367)
Gui.f_Main.GsGcVendor.Position(734,23)
Gui.f_Main.GsGcVendor.Parent("Splitter",0)
Gui.f_Main.GsGcVendor.Anchor(11)
Gui.f_Main.lblVendor.Create(Label,"Vendors:",True,43,13,0,734,6,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblVendor.BorderStyle(0)
Gui.f_Main.lblVendor.Parent("Splitter",0)
Gui.f_Main.lblCust.Create(Label,"Customers:",True,55,13,0,15,6,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblCust.BorderStyle(0)
Gui.f_Main.lblCust.Parent("Splitter",0)
Gui.f_Main.GsGCCust.Create(GsGridControl)
Gui.f_Main.GsGCCust.Enabled(True)
Gui.f_Main.GsGCCust.Visible(True)
Gui.f_Main.GsGCCust.Zorder(0)
Gui.f_Main.GsGCCust.Size(699,367)
Gui.f_Main.GsGCCust.Position(15,23)
Gui.f_Main.GsGCCust.Parent("Splitter",0)
Gui.f_Main.GsGCCust.Anchor(15)
Gui.f_Main.GsGCOrder.Create(GsGridControl)
Gui.f_Main.GsGCOrder.Enabled(True)
Gui.f_Main.GsGCOrder.Visible(True)
Gui.f_Main.GsGCOrder.Zorder(0)
Gui.f_Main.GsGCOrder.Size(699,367)
Gui.f_Main.GsGCOrder.Position(15,25)
Gui.f_Main.GsGCOrder.Parent("Splitter",1)
Gui.f_Main.GsGCOrder.Anchor(7)
Gui.f_Main.lblOrders.Create(Label,"Orders:",True,37,13,0,15,8,True,0,"Tahoma",8.25,,0,0)
Gui.f_Main.lblOrders.BorderStyle(0)
Gui.f_Main.lblOrders.Parent("Splitter",1)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
V.Global.bError.Declare(Boolean)
V.Global.bEmptyDT.Declare(Boolean, False)
V.Global.bUnattended.Declare(Boolean)
V.Global.sUsername.Declare(String)
V.Global.sPassword.Declare(String)
V.Global.sURL.Declare(String)
V.Global.sFlag.Declare(String)
V.Global.sMatchFlag.Declare(String, "N")
V.Global.sStatusFound.Declare(String, "N")
V.Global.sSSLCert.Declare(String)
V.Global.sContentType.Declare(String)
V.Global.sHook.Declare(String)
V.Global.sCustomer.Declare(String)
V.Global.sSubmitType.Declare(String,"")
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
V.Local.bSecGroup.Declare(Boolean)
'TE Connectivity
'A dashboard to show the trade compliance status for all orders, shipments and purchase orders
'Written by Ashley Collins
'February 2022
Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

'open the connection to the database
F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass,10000)

'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	V.Global.bEmptyDT.Set(True)

	'load customer grid
	F.Intrinsic.Control.CallSub(LoadCustomers)
	
	'load vendor grid
	F.Intrinsic.Control.CallSub(LoadVendors)
	
	'load order  grid
	F.Intrinsic.Control.CallSub(LoadOrders)
	
	'load shipment grid
	F.Intrinsic.Control.CallSub(LoadShipments)
	
	'load purchase order grid
	'F.Intrinsic.Control.CallSub(LoadPO)
	
	F.Intrinsic.Control.CallSub(SetContextMenus)
	
	Gui.f_Main..ApplyTheme
	'show the dashboard
	Gui.f_Main..Show
F.Intrinsic.Control.Else
	Gui.f_Main..Caption("Restricted Access - Trade Compliance Admin Dashboard (6625)")
	V.Global.bEmptyDT.Set(True)

	'load customer grid
	F.Intrinsic.Control.CallSub(LoadCustomers)
	
	'load vendor grid
	F.Intrinsic.Control.CallSub(LoadVendors)
	
	'load order  grid
	F.Intrinsic.Control.CallSub(LoadOrders)
	
	'load shipment grid
	F.Intrinsic.Control.CallSub(LoadShipments)
	
	F.Intrinsic.Control.CallSub(SetContextMenus)
	
	Gui.f_Main..ApplyTheme
	'show the dashboard
	Gui.f_Main..Show
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.cmdCustSrch_Click.Start
F.Intrinsic.Control.Try
V.Local.sRet.Declare(String)

'show customer browser
F.Intrinsic.UI.Browser(205, "", V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", v.Local.sRet)
	Gui.f_Main.txtCustSrch.Text(V.Local.sRet(0).Trim)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdCustSrch_Click.End

Program.Sub.cmdOrdSrch_Click.Start
F.Intrinsic.Control.Try
V.Local.iWidths.Declare(Long)
V.Local.sTitles.Declare(String)
V.Local.sRet.Declare(String)

'build browser titles
F.Intrinsic.String.Split("Order Number*!*Customer*!*Customre PO", "*!*", V.Local.sTitles)
'set the browser column widths
F.Intrinsic.String.Split("1000*!*1000*!*1500", "*!*", V.Local.iWidths)

'show order browser
F.Intrinsic.UI.Browser("Select Order", "con", "SELECT ORDER_NO, CUSTOMER, CUSTOMER_PO FROM V_ORDER_HEADER ORDER BY ORDER_NO", V.Local.sTitles, V.Local.iWidths, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*", V.Local.sRet)
	Gui.f_Main.txtOrderSrch.Text(V.Local.sRet(0).Trim)
	Gui.f_Main.txtCustSrch.Text(V.Local.sRet(1).Trim)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub


F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdOrdSrch_Click.End

Program.Sub.cmdPackList_Click.Start
F.Intrinsic.Control.Try
V.Local.iWidths.Declare(Long)
V.Local.sTitles.Declare(String)
V.Local.sRet.Declare(String)

'build browser titles
F.Intrinsic.String.Split("Packing List*!*Order Number*!*Order Sequence*!*Customer*!*Customre PO*!*Invoice*!*Ship To", "*!*", V.Local.sTitles)
'set the browser column widths
F.Intrinsic.String.Split("1000*!*1000*!*1000*!*800*!*1500*!*750*!*750", "*!*", V.Local.iWidths)

'show packing list browser
F.Intrinsic.UI.Browser("Select Packing List", "con", "SELECT A.PCK_NO, B.ORDER_NO, B.ORDER_SUFFIX, B.CUSTOMER, B.CUSTOMER_PO, B.INVOICE, B.SHIP_ID FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO ORDER BY A.PCK_NO, B.ORDER_NO, B.ORDER_SUFFIX", V.Local.sTitles, V.Local.iWidths, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet,"*!*", V.Local.sRet)
	Gui.f_Main.txtPackList.Text(v.Local.sRet(0).Trim)
	Gui.f_Main.txtOrderSrch.Text(V.Local.sRet(1).Trim)
	Gui.f_Main.txtCustSrch.Text(V.Local.sRet(3).Trim)
	
'	Gui.f_Main.txtOrderSrch.Text("")
'	Gui.f_Main.txtCustSrch.Text("")
'	Gui.f_Main.txtVendSrch.Text("")
'	Gui.f_Main.txtPOSrch.Text("")
	
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPackList_Click.End

Program.Sub.cmdVendSrch_Click.Start
F.Intrinsic.Control.Try
V.Local.sRet.Declare(String)

'show vendor browser
F.Intrinsic.UI.Browser(300, "", V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	Gui.f_Main.txtVendSrch.Text(V.Local.sRet(0).Trim)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdVendSrch_Click.End

Program.Sub.cmdPOSrch_Click.Start
F.Intrinsic.Control.Try
V.Local.sRet.Declare(String)

'show PO browser
F.Intrinsic.UI.Browser(4000, "", V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"***CANCEL***")
	F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	Gui.f_Main.txtPOSrch.Text(V.Local.sRet(0).Trim)

F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdPOSrch_Click.End

Program.Sub.cmdSearch_Click.Start
F.Intrinsic.Control.Try
V.Global.bEmptyDT.Set(False)
F.Intrinsic.UI.InvokeWaitDialog("Loading Grids...", "Please Wait")
Gui.f_Main..Enabled(False)

Gui.f_Main.cmdSearch.Enabled(False)
'delete rows from all datatables
F.Data.DataTable.DeleteRow("dtCust")
F.Data.DataTable.DeleteRow("dtVendor")
F.Data.DataTable.DeleteRow("dtOrders")
F.Data.DataTable.DeleteRow("dtOrders$dtOrderLines")
F.Data.DataTable.DeleteRow("dtShipments")
'F.Data.DataTable.DeleteRow("dtPO")


'check to see if the order no textbox is populated
F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
	F.Intrinsic.Control.CallSub(LoadCustomers)
	F.Intrinsic.Control.CallSub(LoadOrders)
	F.Intrinsic.Control.CallSub(LoadShipments)
F.Intrinsic.Control.EndIf

'check to see if the order number textbox is populated
F.Intrinsic.Control.If(V.Screen.f_Main!txtOrderSrch.Text,<>,"")
	'load order  grid
	F.Intrinsic.Control.CallSub(LoadOrders)
F.Intrinsic.Control.EndIf

'check to see if the shipment order no/order seq is populated
F.Intrinsic.Control.If(V.Screen.f_Main!txtPackList.Text,<>,"")
	F.Intrinsic.Control.CallSub(LoadShipments)
F.Intrinsic.Control.EndIf

'check to see if the packing list textbox is populated

'check to see if the vendor textbox is populated
F.Intrinsic.Control.If(V.Screen.f_Main!txtVendSrch.Text,<>,"")
	'load vendor grid
	F.Intrinsic.Control.CallSub(LoadVendors)
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,=,"", V.Screen.f_Main!txtPackList.Text,=,"", V.Screen.f_Main!txtVendSrch.Text,=,"")
	'load all grids because we're assuming that they want to see all the records for each grid
	F.Intrinsic.Control.CallSub(LoadAllGrids)
F.Intrinsic.Control.EndIf

Gui.f_Main.txtCustSrch.Text("")
Gui.f_Main.txtOrderSrch.Text("")
Gui.f_Main.txtPackList.Text("")
Gui.f_Main.txtVendSrch.Text("")
'Gui.f_Main.txtPOSrch.Text("")

F.Intrinsic.UI.CloseWaitDialog
Gui.f_Main..Enabled(True)
Gui.f_Main.cmdSearch.Enabled(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.cmdSearch_Click.End

Program.Sub.LoadCustomers.Start
F.Intrinsic.Control.Try
V.Local.sCust.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCnt.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtCust.Exists)
	F.Data.DataTable.Close("dtCust")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtCust", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtCust", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf
'pull in the Ship TOs for each customer
F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP WHERE CUSTOMER = '' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf
'merge the ship to datatable into the dtcust table
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf
'merge the ship to datatable into the dtcust table
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)

'check to see if the customer dataview exists. if it does, close it
F.Intrinsic.Control.If(V.DataView.dtCust!dvCust.Exists,=,True)
	F.Data.DataView.Close("dtCust", "dvCust")
F.Intrinsic.Control.EndIf
'create a dataview to sort the datatable by the customer 
F.Data.DataView.Create("dtCust", "dvCust",22, "", "[CUSTOMER] ASC, [SHIP_TO] ASC")
'check to make sure the temp dtcust table doesn't exist. if it does, close it
F.Intrinsic.Control.If(v.DataTable.dtCustTemp.Exists,=,True)
	F.Data.DataTable.Close("dtCustTemp")
F.Intrinsic.Control.EndIf
'copy the sorted dataview to the temp dtcust table
F.Data.DataView.ToDataTable("dtCust", "dvCust", "dtCustTemp", True)
'delete all the rows in the dtcust table to make sure the merged rows aren't added to it
F.Data.DataTable.DeleteRow("dtCust")
F.Data.DataTable.AcceptChanges("dtCust")
'merge the temp dtcust table into the dtcust table to get the sorted table
F.Data.DataTable.Merge("dtCustTemp", "dtCust", True, 1)

'load the Trade Automation Status for each record
'loop through the datatable and query the custom table to get status
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtCust.RowCount--,1)
	'get the TCS status for the header ship to
	F.Intrinsic.Control.If(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim,=,"")
		V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sCustomer.Trim, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.Else
	'get the TCS Status for the additional ship to
		V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
		V.Local.sShipTo.Set(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim)
		F.Intrinsic.String.Build("{0}_{1}", V.Local.sCustomer.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCnt)

'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatCustGrid)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadCustomers.End

Program.Sub.FormatCustGrid.Start
F.Intrinsic.Control.Try
V.Local.sDefault.Declare(String)
V.Local.sGV.Declare(String)
V.Local.sProperty.Declare(String)
V.Local.bSecGroup.Declare(Boolean)

'create grid view for datatable
Gui.f_Main.GsGCCust.AddGridviewFromDatatable("gvCust", "dtCust")
V.Local.sGV.Set("gvCust")

'set grid properties
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCCust.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)


'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", "Visible", True)
	Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.Else
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", "Visible", False)
	Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.EndIf

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, "Customer")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, "Customer Name")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, "Ship To ID")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, True)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, False)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, 50)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "NAME_CUSTOMER", V.Local.sProperty, 200)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, 75)
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 200)

V.Local.sProperty.Set("MaxWidth")
Gui.f_Main.GsGCCust.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)

Gui.f_Main.GsGCCust.MainView("gvCust")


F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.FormatCustGrid.End

Program.Sub.LoadVendors.Start
F.Intrinsic.Control.Try
V.Local.sVendor.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCnt.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)

'check to see if datatable exists
F.Intrinsic.Control.If(V.DataTable.dtVendor.Exists,=,True)
	F.Data.DataTable.Close("dtVendor")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'create the datatable from vendor master
	F.Intrinsic.Control.If(V.Screen.f_Main!txtVendSrch.Text,<>,"")
		V.Local.sVendor.Set(V.Screen.f_Main!txtVendSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '{0}' ORDER BY VENDOR", V.Local.sVendor.Trim, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtVendor", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	'create the datatable from vendor master
	F.Data.DataTable.CreateFromSQL("dtVendor", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '' AND NAME_VENDOR = '' ORDER BY VENDOR", True)
F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
'	F.Data.DataTable.Close("dtTemp")
'F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
'	'create the datatable from vendor master
'	F.Intrinsic.Control.If(V.Screen.f_Main!txtVendSrch.Text,<>,"")
'		V.Local.sVendor.Set(V.Screen.f_Main!txtVendSrch.Text)
'		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '{0}' ORDER BY VENDOR", V.Local.sVendor.Trim, V.Local.sSQL)
'		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
'	'create the datatable from vendor master
'	F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '' AND NAME_VENDOR = '' ORDER BY VENDOR", True)
'F.Intrinsic.Control.EndIf

''merge the temp table into the dtvend table
'F.Data.DataTable.Merge("dtTemp", "dtVendor", True,1)

'check to see if the dataview exists, if it does, close it
F.Intrinsic.Control.If(V.DataView.dtVendor!dvVend.Exists,=,True)
	F.Data.DataView.Close("dtVendor", "dvVend")
F.Intrinsic.Control.EndIf

'create the dataview to sort the records by vendor, vend id
F.Data.DataView.Create("dtVendor", "dvVend", 22, "", "[VENDOR] ASC")
'check to see if the temp vendor datatable exists. if it does, close it
F.Intrinsic.Control.If(v.DataTable.dtTempVend.Exists,=,True)
	F.Data.DataTable.Close("dtTempVend")
F.Intrinsic.Control.EndIf

'transfer the dataview to a datatable
F.Data.DataView.ToDataTable("dtVendor", "dvVend", "dtTempVend" ,True)
'merge the temp dtvend table into dtvendor
'Delete the existing rows in the datatable so that it doesn't create duplicates
F.Data.DataTable.DeleteRow("dtVendor")
F.Data.DataTable.AcceptChanges("dtVendor")
F.Data.DataTable.Merge("dtTempVend", "dtVendor", True, 1)
'close the temp dtvend
F.Data.DataTable.Close("dtTempVend")


'load the Trade Automation Status for each record
'loop through the datatable and query the custom table to get status
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtVendor.RowCount--,1)
	'get the TCS status for the vendor addresses
	F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VEND_ID!FieldValTrim,<>,"000000")
		V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sVendor.Trim, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
'	F.Intrinsic.Control.Else
'	'get the TCS Status for the other address
'		V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
'		F.Intrinsic.String.Build("{0}_000000", V.Local.sVendor.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
'		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
'		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
'			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
'			F.Intrinsic.Control.Case("N")
'				V.Local.sStatus.Set("No Match, Approved")
'			F.Intrinsic.Control.Case("P")
'				V.Local.sStatus.Set("Potential Match")
'			F.Intrinsic.Control.Case("M")
'				V.Local.sStatus.Set("Match")
'			F.Intrinsic.Control.Case("X")
'				V.Local.sStatus.Set("Awaiting TCS Status")
'			F.Intrinsic.Control.EndSelect
'		F.Intrinsic.Control.Else
'			V.Local.sStatus.Set("Unscreened Address")
'		F.Intrinsic.Control.EndIf
'		
'		F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.EndIf
	
	'remove the company vendor reocrds
	F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim,=,"")
		F.Data.DataTable.DeleteRow("dtVendor", V.Local.iCnt)
		F.Data.DataTable.AcceptChanges("dtVendor")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCnt)

'remove the vend_id column
F.Data.DataTable.RemoveColumn("dtVendor", "VEND_ID")


'callsub to format the vendor grid
F.Intrinsic.Control.CallSub(FormatVendorGrid)

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadVendors.End

Program.Sub.FormatVendorGrid.Start
F.Intrinsic.Control.Try
V.Local.sDefault.Declare(String)
V.Local.sGv.Declare(String)
V.Local.sProperty.Declare(String)
V.Local.bSecGroup.Declare(Boolean)

'add gridview from the datatable
Gui.f_Main.GsGcVendor.AddGridviewFromDatatable("gvVendor", "dtVendor")
V.Local.sGv.Set("gvVendor")

'set grid properties
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGcVendor.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)

'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", "Visible", True)
	Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.Else
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", "Visible", False)
	Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.EndIf

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, "Vendor")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, "Vendor Name")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, "Addr. Type")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, True)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, False)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, 60)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "NAME_VENDOR", V.Local.sProperty, 200)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 200)
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "VEND_TYPE", V.Local.sProperty, 75)

V.Local.sProperty.Set("MaxWidth")
Gui.f_Main.GsGcVendor.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)

Gui.f_Main.GsGcVendor.MainView("gvVendor")

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.FormatVendorGrid.End

Program.Sub.LoadOrders.Start
F.Intrinsic.Control.Try
V.Local.sCust.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sSQl.Declare(String)
V.Local.bAwaitingStatus.Declare(Boolean)
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iApprovalFlag.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sVendor.Declare(String)
V.Local.sStatus2.Declare(String)
V.Local.sHeaderStatus.Declare(String)

'check to see if order datatable exists
F.Intrinsic.Control.If(V.DataTable.dtOrders.Exists)
	F.Data.DataTable.Close("dtOrders")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtOrders$dtOrderLines.Exists)
	F.Data.DataTable.Close("dtOrders$dtOrderLines")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	F.Intrinsic.Control.If(v.Screen.f_Main!txtOrderSrch.Text,<>,"")
		V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER WHERE ORDER_NO = '{0}' ORDER BY ORDER_NO", V.Local.sOrderNo.Trim, V.Local.sSQl)
		F.Data.DataTable.CreateFromSQL("dtOrders", "con",V.Local.sSQl, True)
	F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtOrderSrch.Text,=,"","AND", V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER WHERE CUSTOMER = '{0}' ORDER BY ORDER_NO", V.Local.sCust.Trim,V.Local.sSQl)
		F.Data.DataTable.CreateFromSQL("dtOrders", "con",V.Local.sSQl, True)
	F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtOrderSrch.Text,<>,"","AND", V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER WHERE ORDER_NO = '{0}' AND CUSTOMER = '{1}' ORDER BY ORDER_NO", V.Local.sOrderNo.Trim,  V.Local.sCust.Trim,V.Local.sSQl)
		F.Data.DataTable.CreateFromSQL("dtOrders", "con",V.Local.sSQl, True)
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Data.DataTable.CreateFromSQL("dtOrders", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER WHERE ORDER_NO = '' ORDER BY ORDER_NO", True)
F.Intrinsic.Control.EndIf


'create child datatable for order lines
F.Data.DataTable.AddTable("dtOrders", "dtOrderLines")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "ORDER_NO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "RECORD_NO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "SHIP_TO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PART", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "LOC", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "QTY_ORDERED", "FLOAT")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PRICE", "FLOAT")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "TCS_STATUS", "STRING")


'loop through the order header table - use the order number to get the order lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtOrders.RowCount--,1)
	V.Local.sOrderNo.Set(V.DataTable.dtOrders(V.Local.iCnt).ORDER_NO!FieldValTrim)
	F.Intrinsic.String.Build("SELECT ORDER_NO, RECORD_NO, SHIP_ID, PART, LOCATION, QTY_ORDERED, PRICE, '' AS TCS_STATUS FROM V_ORDER_LINES WHERE ORDER_NO = '{0}' AND LINE_TYPE <> 'F' ", V.Local.sOrderNo.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each order line 
			'build query to pull status for order line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND POSNR = '{1}'  ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
				F.Data.DataTable.Close("dtOrdStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtOrdStatus","dvDPL")
					F.Data.DataView.Close("dtOrdStatus","dvLIC")
					F.Data.DataView.Close("dtOrdStatus","dvData")
					F.Data.DataView.Close("dtOrdStatus","dvEUC")
				F.Intrinsic.Control.Else
					
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
					V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
				F.Intrinsic.Control.Else
					V.Local.iApprovalFlag.Set(0)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
					V.Local.sStatus.Set("Unscreened Order Line")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtOrdStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtOrders$dtOrderLines", "ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "SHIP_TO", V.DataTable.dtTemp(V.Local.iCnt2).SHIP_ID!FieldValTrim, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf
	
	'check to see if the order header has been approved. if it hasn't set the status as that
	F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
	F.Intrinsic.Control.Else
		V.Local.iApprovalFlag.Set(0)
	F.Intrinsic.Control.EndIf
				
	F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
		V.Local.sStatus.Set("Order Not Approved")
	F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
		'build query to pull TCS Status
		F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND PARTID <> '' ", V.Local.sOrderNo.Trim, V.Local.sSQL)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
		
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus.Set("DPL Fail Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("LIC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Data Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("EUC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtOrdStatus","dvDPL")
			F.Data.DataView.Close("dtOrdStatus","dvLIC")
			F.Data.DataView.Close("dtOrdStatus","dvData")
			F.Data.DataView.Close("dtOrdStatus","dvEUC")
			
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
				F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
					'check approval status
					F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
							V.Local.sStatus.Set("Order Not Approved")
						F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
							V.Local.sStatus.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
						V.Local.sStatus.Set("Order Not Approved")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
						V.Local.sStatus.Set("TA Pass")
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Line(s) have failed TA Screen")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
			f.Intrinsic.Control.Else
				V.Local.sStatus.Set("Line(s) have failed TA Screen")
			F.Intrinsic.Control.EndIf
			
			
		
			
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.Else
			'check approval status
			F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
					V.Local.sStatus.Set("Unscreened Order")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
				V.Local.sStatus.Set("Unscreened Order")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SetValue("dtOrders", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)

'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatOrderGrid)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadOrders.End

Program.Sub.FormatOrderGrid.Start
F.Intrinsic.Control.Try
V.Local.sDefault.Declare(String)
V.Local.sGV.Declare(String)
V.Local.sProperty.Declare(String)
V.Local.bSecGroup.Declare(Boolean)

'Add gridview for datatable
Gui.f_Main.GsGCOrder.AddGridviewFromDatatable("gvOrders", "dtOrders")
V.Local.sGV.Set("gvOrders")

'set grid properties
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)

'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", "Visible", True)
	Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.Else
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", "Visible", False)
	Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.EndIf

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, " ")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, "Order")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, "Customer")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, True)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, False)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, 75)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, 100)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 200)

V.Local.sProperty.Set("MaxWidth")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)


'formatting child datatable
Gui.f_Main.GsGCOrder.AddGridviewFromDatatable("gvOrderLines", "dtOrders$dtOrderLines")
V.Local.sGV.Set("gvOrderLines")
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "OptionsViewRowAutoHeight", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCOrder.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)

Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", "Visible", False)

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, "Order")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, "Line")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, "Ship To")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, "Part")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, "Loc")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, "Qty Ordered")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, "Price")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty,  V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty,  V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty,  V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty,  V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, 75)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty,50)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "SHIP_TO", V.Local.sProperty, 75)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, 100)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, 30)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, 75)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, 50)
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 150)


V.Local.sProperty.Set("CellWordWrap")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "Wrap")

V.Local.sProperty.Set("DisplayCustomNumeric")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, " #,###,###,##0.00")
Gui.f_Main.GsGCOrder.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, " #,###,###,##0.00")

'check to see if the datatable has any records. If it does, add the relation
'F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount--,>,-1)
	Gui.f_Main.GsGCOrder.AddRelation("gvOrders", "gvOrderLines", "ORDER_NO", "ORDER_NO", "OrderRel")
'F.Intrinsic.Control.EndIf

Gui.f_Main.GsGCOrder.MainView("gvOrders")

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.FormatOrderGrid.End

Program.Sub.LoadShipments.Start
F.Intrinsic.Control.Try
V.Local.bAwaitingStatus.Declare(Boolean)
V.Local.iCnt.Declare(Long)
v.Local.iCnt2.Declare(Long)
V.Local.sOrderNo.Declare(String)
V.Local.sOrderSeq.Declare(String)
V.Local.sPackingList.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sStatus2.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.Control.If(V.DataTable.dtShipments.Exists)
	F.Data.DataTable.Close("dtShipments")
F.Intrinsic.Control.EndIf

''F.Data.DataTable.Create("dtShipments", True)
''F.Data.DataTable.AddColumn("dtShipments", "SEL", "BOOLEAN")
''F.Data.DataTable.AddColumn("dtShipments", "ORDER_NO", "STRING")
''F.Data.DataTable.AddColumn("dtShipments", "ORDER_SUFFIX", "STRING")
''F.Data.DataTable.AddColumn("dtShipments", "CUSTOMER", "STRING")
''F.Data.DataTable.AddColumn("dtShipments", "INVOICE", "STRING")
''F.Data.DataTable.AddColumn("dtShipments","TCS_STATUS", "STRING")

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	F.Intrinsic.Control.If(V.Screen.f_Main!txtPackList.Text,<>,"")
		'Check to see if there is a packing list entered
		V.Local.sPackingList.Set(V.Screen.f_Main!txtPackList.Text)
		F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,<>,"")
			V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
			V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID, B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '{0}' AND B.CUSTOMER = '{1}' AND B.ORDER_NO = '{2}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sPackingList.Trim, v.Local.sCust.Trim, v.Local.sOrderNo.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtCustSrch.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,<>,"")
			V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '{0}' AND B.ORDER_NO = '{1}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sPackingList.Trim, v.Local.sOrderNo.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtCustSrch.Text,<>,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,=,"")
			V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '{0}' AND B.CUSTOMER = '{1}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sPackingList.Trim, v.Local.sCust.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(v.Screen.f_Main!txtCustSrch.Text,=,"","AND", v.Screen.f_Main!txtOrderSrch.Text,=,"")
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '{0}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sPackingList.Trim, v.Local.sCust.Trim, v.Local.sOrderNo.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Else
		'if there is no packing list entered, check the other fields
		F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,<>,"")
			V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
			V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE B.CUSTOMER = '{0}' AND B.ORDER_NO = '{1}' ORDER BY A.PCK_NO, B.ORDER_NO", v.Local.sCust.Trim, v.Local.sOrderNo.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtCustSrch.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,<>,"")
			V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO,B.SHIP_ID, B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE B.ORDER_NO = '{0}' ORDER BY A.PCK_NO, B.ORDER_NO", v.Local.sOrderNo.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtCustSrch.Text,<>,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,=,"")
			V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
			F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE B.CUSTOMER = '{0}' ORDER BY A.PCK_NO, B.ORDER_NO", v.Local.sCust.Trim, V.Local.sSQL)
			F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtCustSrch.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,=,"")
			F.Data.DataTable.CreateFromSQL("dtShipments", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO ORDER BY A.PCK_NO, B.ORDER_NO", True)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Data.DataTable.CreateFromSQL("dtShipments", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '' AND B.ORDER_NO = '' ORDER BY A.PCK_NO, B.ORDER_NO", True)
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.If(V.DataTable.dtShipments$dtShipmentLines.Exists,=,True)
	F.Data.DataTable.Close("dtShipments$dtShipmentLines")
F.Intrinsic.Control.EndIf

'create child datatable for shipment lines
F.Data.DataTable.AddTable("dtShipments", "dtShipmentLines")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PACKING_LIST", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "ORDER_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "RECORD_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PART", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "LOC", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_ORDERED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_SHIPPED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PRICE", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "TCS_STATUS", "STRING")


'loop through the shipment header table - use the shipment number to get the lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtShipments.RowCount--,1)
	V.Local.sPackingList.Set(V.DataTable.dtShipments(V.Local.iCnt).PACKING_LIST!FieldValTrim)
	v.Local.sOrderNo.Set(v.DataTable.dtShipments(v.Local.iCnt).ORDER_NO!FieldValTrim)
	F.Intrinsic.String.Build("SELECT PCK_NO AS PACKING_LIST, ORDER_NO, ORDER_REC AS RECORD_NO, PART, LOCATION, QTY_ORDERED, QTY_SHIPPED, PRICE, '' AS TCS_STATUS FROM V_SHIPMENT_LINES WHERE ORDER_NO = '{0}' AND PCK_NO ='{1}' AND LINE_TYPE <> 'F' ", V.Local.sOrderNo.Trim, v.Local.sPackingList.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each shipment line 
			'build query to pull status for shipment line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND POSNR = '{1}' AND PACKING_LIST = '{2}' ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, v.Local.sPackingList.Trim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
				F.Data.DataTable.Close("dtShipStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtShipStatus","dvDPL")
				F.Data.DataView.Close("dtShipStatus","dvLIC")
				F.Data.DataView.Close("dtShipStatus","dvData")
				F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtShipStatus","dvDPL")
					F.Data.DataView.Close("dtShipStatus","dvLIC")
					F.Data.DataView.Close("dtShipStatus","dvData")
					F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
			
				V.Local.sStatus.Set("Unscreened Line")
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtShipStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtShipments$dtShipmentLines", "PACKING_LIST", v.DataTable.dtTemp(v.Local.iCnt2).PACKING_LIST!FIeldValTrim,"ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "QTY_SHIPPED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_SHIPPED!FieldValFloat,"PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf

	'build query to pull TCS Status
	F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND PACKING_LIST = '{1}' AND (POSNR <> '' OR POSNR IS NOT NULL) ", V.Local.sOrderNo.Trim, V.Local.sPackingList.Trim, V.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
		F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
			V.Local.sStatus.Set("DPL Fail Status")
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("LIC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Data Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("EUC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.Close("dtShipStatus","dvDPL")
		F.Data.DataView.Close("dtShipStatus","dvLIC")
		F.Data.DataView.Close("dtShipStatus","dvData")
		F.Data.DataView.Close("dtShipStatus","dvEUC")
		
		F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
			F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus2.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus2.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
			F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
					V.Local.sStatus.Set("TA Pass")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Line(s) have failed TA Screen")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtShipStatus","dvDPL")
			F.Data.DataView.Close("dtShipStatus","dvLIC")
			F.Data.DataView.Close("dtShipStatus","dvData")
			F.Data.DataView.Close("dtShipStatus","dvEUC")
			
		f.Intrinsic.Control.Else
			V.Local.sStatus.Set("Line(s) have failed TA Screen")
		F.Intrinsic.Control.EndIf
			
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.Else
		V.Local.sStatus.Set("Unscreened Shipment")
	F.Intrinsic.Control.EndIf	

	
	F.Data.DataTable.SetValue("dtShipments", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)

'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatShipmentGrid)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadShipments.End

Program.Sub.FormatShipmentGrid.Start
F.Intrinsic.Control.Try
V.Local.sDefault.Declare(String)
V.Local.sGV.Declare(String)
V.Local.sProperty.Declare(String)
V.Local.bSecGroup.Declare(Boolean)

Gui.f_Main.GsGCShipment.AddGridviewFromDatatable("gvShipments", "dtShipments")
V.Local.sGV.Set("gvShipments")
'set grid properties
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)

'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", "Visible", True)
	Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.Else
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", "Visible", False)
	Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.EndIf

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, "Order No")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, "Ship To")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, "Packing List")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, "Customer")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, True)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, False)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, 75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SHIP_ID", V.Local.sProperty, 70)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty,75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "CUSTOMER", V.Local.sProperty,100)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 200)

V.Local.sProperty.Set("MaxWidth")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)

'formatting child datatable
Gui.f_Main.GsGCShipment.AddGridviewFromDatatable("gvShipmentLines", "dtShipments$dtShipmentLines")
V.Local.sGV.Set("gvShipmentLines")
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "OptionsViewRowAutoHeight", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCShipment.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)

Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", "Visible", False)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", "Visible", False)

'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, "Packing List")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, "Order")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, "Line")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, "Part")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, "Loc")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, "Qty Ordered")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, "Qty Shipped")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, "Price")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, V.Local.sDefault)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, V.Local.sDefault)


V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PACKING_LIST", V.Local.sProperty, 75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "ORDER_NO", V.Local.sProperty, 75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "RECORD_NO", V.Local.sProperty,50)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PART", V.Local.sProperty, 100)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "LOC", V.Local.sProperty, 30)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, 75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, 75)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, 50)
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 150)


V.Local.sProperty.Set("CellWordWrap")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "Wrap")

V.Local.sProperty.Set("DisplayCustomNumeric")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_SHIPPED", V.Local.sProperty, " #,###,###,##0.00")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "QTY_ORDERED", V.Local.sProperty, " #,###,###,##0.00")
Gui.f_Main.GsGCShipment.SetColumnProperty(V.Local.sGV, "PRICE", V.Local.sProperty, " #,###,###,##0.00")

'check to see if the datatable has any records. If it does, add the relation
'F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount--,>,-1)
	Gui.f_Main.GsGCShipment.AddRelation("gvShipments", "gvShipmentLines", "PACKING_LIST", "PACKING_LIST", "ShipRel")
'F.Intrinsic.Control.EndIf

Gui.f_Main.GsGCShipment.MainView("gvShipments")

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.FormatShipmentGrid.End

Program.Sub.LoadPO.Start
F.Intrinsic.Control.Try
V.Local.sPO.Declare(String)
v.Local.sSQL.Declare(String)
'check to see if the datatable exists
F.Intrinsic.Control.If(V.DataTable.dtPO.Exists)
	F.Data.DataTable.Close("dtPO")
F.Intrinsic.Control.EndIf

''create the datatable
'F.Data.DataTable.Create("dtPO", True)

''add columns
'F.Data.DataTable.AddColumn("dtPO", "SEL", "BOOLEAN")
'F.Data.DataTable.AddColumn("dtPO", "PURCHASE_ORDER", "STRING")
'F.Data.DataTable.AddColumn("dtPO", "VENDOR", "STRING")
'F.Data.DataTable.AddColumn("dtPO", "TCS_STATUS", "STRING")


F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	F.Intrinsic.Control.If(V.Screen.f_Main!txtPOSrch.Text)
		V.Local.sPO.Set(V.Screen.f_Main!txtPOSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, PURCHASE_ORDER, VENDOR, '' AS TCS_STATUS FROM V_PO_HEADER WHERE PURCHASE_ORDER = '{0}' ORDER BY PURCHASE_ORDER", V.Local.sPO.Trim, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtPO", "con",V.Local.sSQL, True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Data.DataTable.CreateFromSQL("dtPO", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, PURCHASE_ORDER, VENDOR, '' AS TCS_STATUS FROM V_PO_HEADER WHERE PURCHASE_ORDER ='' AND VENDOR = '' ORDER BY PURCHASE_ORDER", True)
F.Intrinsic.Control.EndIf

'callsub to format the PO grid
f.Intrinsic.Control.CallSub(FormatPOGrid)

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadPO.End

Program.Sub.FormatPOGrid.Start
F.Intrinsic.Control.Try
V.Local.sDefault.Declare(String)
V.Local.sGV.Declare(String)
V.Local.sProperty.Declare(String)
V.Local.bSecGroup.Declare(Boolean)

Gui.f_Main.GsGCPO.AddGridviewFromDatatable("gvPO", "dtPO")
V.Local.sGV.Set("gvPO")
'set grid properties
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "MultiSelect", False)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "AllowFilter", True)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "OptionsViewShowGroupPanel", False)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "OptionsViewShowAutoFilterRow", False)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "EnableAppearanceOddRow", False)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "OptionsViewColumnAutoWidth", True)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "AllowColumnResizing", True)
Gui.f_Main.GsGCPO.SetGridviewProperty(V.Local.sGV, "AllowColumnMoving", True)


'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,True)
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", "Visible", True)
	Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.Else
	'check to see if the user is an admin. If they aren't, hide the SEL column. If they are, make it visible
	Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", "Visible", False)
	Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", "AllowShowHide", False)
F.Intrinsic.Control.EndIf


'set column properties
V.Local.sProperty.Set("Caption")
V.Local.sDefault.Set(" ")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, "Purchase Order")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, "Vendor")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, "TCS Status")

V.Local.sProperty.Set("AllowEdit")
V.Local.sDefault.Set("False")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, True)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("ReadOnly")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, False)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderFontBold")
V.Local.sDefault.Set("True")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("HeaderHAlignment")
V.Local.sDefault.Set("Center")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, v.Local.sDefault)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, v.Local.sDefault)

V.Local.sProperty.Set("MinWidth")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "PURCHASE_ORDER", V.Local.sProperty, 75)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "VENDOR", V.Local.sProperty, 100)
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "TCS_STATUS", V.Local.sProperty, 200)

V.Local.sProperty.Set("MaxWidth")
Gui.f_Main.GsGCPO.SetColumnProperty(V.Local.sGV, "SEL", V.Local.sProperty, 20)

Gui.f_Main.GsGCPO.MainView("gvPO")

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.FormatPOGrid.End

Program.Sub.LoadAllGrids.Start
F.Intrinsic.Control.Try
V.Local.bAwaitingStatus.Declare(Boolean)
V.Local.iApprovalFlag.Declare(Long)
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sVendor.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sStatus2.Declare(String)
V.Local.sPackingList.Declare(String)

'F.Intrinsic.UI.InvokeWaitDialog("Loading All Grids...", "Please Wait")
'load customer grid
F.Intrinsic.Control.If(V.DataTable.dtCust.Exists)
	F.Data.DataTable.Close("dtCust")
F.Intrinsic.Control.EndIf

'create bill to records
F.Data.DataTable.CreateFromSQL("dtCust", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER ORDER BY CUSTOMER", True)

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf

'create ship to header records
F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER ORDER BY CUSTOMER", True)
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)
F.Data.DataTable.Close("dtTemp")

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf

'get the multi ships for customers
F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP  ORDER BY CUSTOMER", True)
'merge the ship to datatable into the dtcust table
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)
'check to see if the customer dataview exists. if it does, close it
F.Intrinsic.Control.If(V.DataView.dtCust!dvCust.Exists,=,True)
	F.Data.DataView.Close("dtCust", "dvCust")
F.Intrinsic.Control.EndIf
'create a dataview to sort the datatable by the customer 
F.Data.DataView.Create("dtCust", "dvCust",22, "", "[CUSTOMER] ASC, [SHIP_TO] ASC")
'check to make sure the temp dtcust table doesn't exist. if it does, close it
F.Intrinsic.Control.If(v.DataTable.dtCustTemp.Exists,=,True)
	F.Data.DataTable.Close("dtCustTemp")
F.Intrinsic.Control.EndIf
'copy the sorted dataview to the temp dtcust table
F.Data.DataView.ToDataTable("dtCust", "dvCust", "dtCustTemp", True)
'delete all the rows in the dtcust table to make sure the merged rows aren't added to it
F.Data.DataTable.DeleteRow("dtCust")
F.Data.DataTable.AcceptChanges("dtCust")
'merge the temp dtcust table into the dtcust table to get the sorted table
F.Data.DataTable.Merge("dtCustTemp", "dtCust", True, 1)

'load the Trade Automation Status for each record
'loop through the datatable and query the custom table to get status
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtCust.RowCount--,1)
	'get the TCS status for the header ship to
	F.Intrinsic.Control.If(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim,=,"")
		V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sCustomer.Trim, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.Else
	'get the TCS Status for the additional ship to
		V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
		V.Local.sShipTo.Set(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim)
		F.Intrinsic.String.Build("{0}_{1}", V.Local.sCustomer.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCnt)
'--------------------------------------------------------------------------------------------------------------------------------------------
V.Local.sStatus.Set("")
'load order grid
F.Intrinsic.Control.If(V.DataTable.dtOrders.Exists)
	F.Data.DataTable.Close("dtOrders")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtOrders$dtOrderLines.Exists)
	F.Data.DataTable.Close("dtOrders$dtOrderLines")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtOrders", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER ORDER BY ORDER_NO", True)
F.Data.DataTable.AddTable("dtOrders", "dtOrderLines")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "ORDER_NO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "RECORD_NO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "SHIP_TO", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PART", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "LOC", "STRING")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "QTY_ORDERED", "FLOAT")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PRICE", "FLOAT")
F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "TCS_STATUS", "STRING")

'loop through the order header table - use the order number to get the order lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtOrders.RowCount--,1)
	V.Local.sOrderNo.Set(V.DataTable.dtOrders(V.Local.iCnt).ORDER_NO!FieldValTrim)
	
	F.Intrinsic.String.Build("SELECT ORDER_NO, RECORD_NO, SHIP_ID, PART, LOCATION, QTY_ORDERED, PRICE, '' AS TCS_STATUS FROM V_ORDER_LINES WHERE ORDER_NO = '{0}' AND LINE_TYPE <> 'F'", V.Local.sOrderNo.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each order line 
			'build query to pull status for order line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND POSNR = '{1}'  ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
				F.Data.DataTable.Close("dtOrdStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus,  V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtOrdStatus","dvDPL")
					F.Data.DataView.Close("dtOrdStatus","dvLIC")
					F.Data.DataView.Close("dtOrdStatus","dvData")
					F.Data.DataView.Close("dtOrdStatus","dvEUC")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
					V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
				F.Intrinsic.Control.Else
					V.Local.iApprovalFlag.Set(0)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
					V.Local.sStatus.Set("Unscreened Order Line")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtOrdStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtOrders$dtOrderLines", "ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "SHIP_TO" ,V.DataTable.dtTemp(V.Local.iCnt2).SHIP_ID!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf
	
	'check to see if the order header has been approved. if it hasn't set the status as that
	F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
	F.Intrinsic.Control.Else
		V.Local.iApprovalFlag.Set(0)
	F.Intrinsic.Control.EndIf
				
	F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
		V.Local.sStatus.Set("Order Not Approved")
	F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
		'build query to pull TCS Status
		F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND PARTID <> '' ", V.Local.sOrderNo.Trim, V.Local.sSQL)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			V.Local.sStatus.Set("")
		
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus.Set("DPL Fail Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("LIC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Data Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("EUC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtOrdStatus","dvDPL")
			F.Data.DataView.Close("dtOrdStatus","dvLIC")
			F.Data.DataView.Close("dtOrdStatus","dvData")
			F.Data.DataView.Close("dtOrdStatus","dvEUC")
			
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
				F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
					'check approval status
					F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
							V.Local.sStatus.Set("Order Not Approved")
						F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
							V.Local.sStatus.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
						V.Local.sStatus.Set("Order Not Approved")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
						V.Local.sStatus.Set("TA Pass")
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Line(s) have failed TA Screen")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
			f.Intrinsic.Control.Else
				V.Local.sStatus.Set("Line(s) have failed TA Screen")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.Else
			'check approval status
			F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
					V.Local.sStatus.Set("Unscreened Order")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
				V.Local.sStatus.Set("Unscreened Order")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SetValue("dtOrders", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)


'----------------------------------------------------------------------------------------------------
'load shipment grid
V.Local.sStatus.Set("")
F.Intrinsic.Control.If(V.DataTable.dtShipments.Exists)
	F.Data.DataTable.Close("dtShipments")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtShipments$dtShipmentLines.Exists,=,True)
	F.Data.DataTable.Close("dtShipments$dtShipmentLines")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtShipments", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL,A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO ORDER BY A.PCK_NO, B.ORDER_NO", True)

'create child datatable for shipment lines
F.Data.DataTable.AddTable("dtShipments", "dtShipmentLines")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PACKING_LIST", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "ORDER_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "RECORD_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PART", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "LOC", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_ORDERED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_SHIPPED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PRICE", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "TCS_STATUS", "STRING")


'loop through the shipment header table - use the shipment number to get the lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtShipments.RowCount--,1)
	V.Local.sPackingList.Set(V.DataTable.dtShipments(V.Local.iCnt).PACKING_LIST!FieldValTrim)
	v.Local.sOrderNo.Set(v.DataTable.dtShipments(v.Local.iCnt).ORDER_NO!FieldValTrim)
	F.Intrinsic.String.Build("SELECT PCK_NO AS PACKING_LIST, ORDER_NO, ORDER_REC AS RECORD_NO, PART, LOCATION, QTY_ORDERED, QTY_SHIPPED, PRICE, '' AS TCS_STATUS FROM V_SHIPMENT_LINES WHERE ORDER_NO = '{0}' AND PCK_NO ='{1}' AND LINE_TYPE <> 'F'", V.Local.sOrderNo.Trim, v.Local.sPackingList.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each shipment line 
			'build query to pull status for shipment line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND POSNR = '{1}' AND PACKING_LIST = '{2}' ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, v.Local.sPackingList.Trim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
				F.Data.DataTable.Close("dtShipStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtShipStatus","dvDPL")
				F.Data.DataView.Close("dtShipStatus","dvLIC")
				F.Data.DataView.Close("dtShipStatus","dvData")
				F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtShipStatus","dvDPL")
					F.Data.DataView.Close("dtShipStatus","dvLIC")
					F.Data.DataView.Close("dtShipStatus","dvData")
					F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
			
				V.Local.sStatus.Set("Unscreened Line")
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtShipStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtShipments$dtShipmentLines", "PACKING_LIST", v.DataTable.dtTemp(v.Local.iCnt2).PACKING_LIST!FIeldValTrim,"ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "QTY_SHIPPED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_SHIPPED!FieldValFloat,"PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf

	'build query to pull TCS Status
	F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND PACKING_LIST = '{1}' AND (POSNR <> '' OR POSNR IS NOT NULL) ", V.Local.sOrderNo.Trim, V.Local.sPackingList.Trim, V.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
		F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
			V.Local.sStatus.Set("DPL Fail Status")
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("LIC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Data Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("EUC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.Close("dtShipStatus","dvDPL")
		F.Data.DataView.Close("dtShipStatus","dvLIC")
		F.Data.DataView.Close("dtShipStatus","dvData")
		F.Data.DataView.Close("dtShipStatus","dvEUC")
		
		F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
			F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus2.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus2.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
			F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
					V.Local.sStatus.Set("TA Pass")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Line(s) have failed TA Screen")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtShipStatus","dvDPL")
			F.Data.DataView.Close("dtShipStatus","dvLIC")
			F.Data.DataView.Close("dtShipStatus","dvData")
			F.Data.DataView.Close("dtShipStatus","dvEUC")
			
		f.Intrinsic.Control.Else
			V.Local.sStatus.Set("Line(s) have failed TA Screen")
		F.Intrinsic.Control.EndIf
			
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.Else
		V.Local.sStatus.Set("Unscreened Shipment")
	F.Intrinsic.Control.EndIf	

	
	F.Data.DataTable.SetValue("dtShipments", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)
'------------------------------------------------------------------------------------------------------
'load Vendor Grid
F.Intrinsic.Control.If(V.DataTable.dtVendor.Exists)
	F.Data.DataTable.Close("dtVendor")
F.Intrinsic.Control.EndIf

F.Data.DataTable.CreateFromSQL("dtVendor", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER ORDER BY VENDOR", True)

F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf

'F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER ORDER BY VENDOR", True)
''merge the temp table into the dtvend table
'F.Data.DataTable.Merge("dtTemp", "dtVendor", True,1)

'check to see if the dataview exists, if it does, close it
F.Intrinsic.Control.If(V.DataView.dtVendor!dvVend.Exists,=,True)
	F.Data.DataView.Close("dtVendor", "dvVend")
F.Intrinsic.Control.EndIf

'create the dataview to sort the records by vendor, vend id
F.Data.DataView.Create("dtVendor", "dvVend", 22, "", "[VENDOR] ASC")
'check to see if the temp vendor datatable exists. if it does, close it
F.Intrinsic.Control.If(v.DataTable.dtTempVend.Exists,=,True)
	F.Data.DataTable.Close("dtTempVend")
F.Intrinsic.Control.EndIf
'transfer the dataview to a datatable
F.Data.DataView.ToDataTable("dtVendor", "dvVend", "dtTempVend" ,True)
F.Data.DataTable.DeleteRow("dtVendor")
F.Data.DataTable.AcceptChanges("dtVendor")
'merge the temp dtvend table into dtvendor
F.Data.DataTable.Merge("dtTempVend", "dtVendor", True, 1)
'close the temp dtvend
F.Data.DataTable.Close("dtTempVend")


'load the Trade Automation Status for each record
'loop through the datatable and query the custom table to get status
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtVendor.RowCount--,1)
	'get the TCS status for the vendor addresses
	F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VEND_ID!FieldValTrim,<>,"000000")
		V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sVendor.Trim, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
			F.Intrinsic.Control.Case("N")
				V.Local.sStatus.Set("No Match, Approved")
			F.Intrinsic.Control.Case("P")
				V.Local.sStatus.Set("Potential Match")
			F.Intrinsic.Control.Case("M")
				V.Local.sStatus.Set("Match")
			F.Intrinsic.Control.Case("X")
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.EndSelect
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("Unscreened Address")
		F.Intrinsic.Control.EndIf
		
		F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
'	F.Intrinsic.Control.Else
'	'get the TCS Status for the other address
'		V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
'		F.Intrinsic.String.Build("{0}_000000", V.Local.sVendor.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
'		F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
'		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
'		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
'			F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
'			F.Intrinsic.Control.Case("N")
'				V.Local.sStatus.Set("No Match, Approved")
'			F.Intrinsic.Control.Case("P")
'				V.Local.sStatus.Set("Potential Match")
'			F.Intrinsic.Control.Case("M")
'				V.Local.sStatus.Set("Match")
'			F.Intrinsic.Control.Case("X")
'				V.Local.sStatus.Set("Awaiting TCS Status")
'			F.Intrinsic.Control.EndSelect
'		F.Intrinsic.Control.Else
'			V.Local.sStatus.Set("Unscreened Address")
'		F.Intrinsic.Control.EndIf
'		
'		F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
	F.Intrinsic.Control.EndIf
	
	'remove the company vendor reocrds
	F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim,=,"")
		F.Data.DataTable.DeleteRow("dtVendor", V.Local.iCnt)
		F.Data.DataTable.AcceptChanges("dtVendor")
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCnt)

'remove the vend_id column
F.Data.DataTable.RemoveColumn("dtVendor", "VEND_ID")

F.Intrinsic.UI.ChangeWaitStatus("Formatting All Grids...")
'format the grids
F.Intrinsic.Control.CallSub(FormatCustGrid)
F.Intrinsic.Control.CallSub(FormatOrderGrid)
F.Intrinsic.Control.CallSub(FormatShipmentGrid)
F.Intrinsic.Control.CallSub(FormatVendorGrid)

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.LoadAllGrids.End

Program.Sub.SetContextMenus.Start
F.Intrinsic.Control.Try
V.Local.bSecGroup.Declare(Boolean)


'set context menu for customer grid
Gui.f_Main..ContextMenuCreate("ctxCustomer")
Gui.f_Main.GsGCCust.ContextMenuAttach("ctxCustomer")
	
'set context menu for vendor grid
Gui.f_Main..ContextMenuCreate("ctxVendor")
Gui.f_Main.GsGcVendor.ContextMenuAttach("ctxVendor")
	
'set context menu for orders grid
Gui.f_Main..ContextMenuCreate("ctxOrders")
Gui.f_Main.GsGCOrder.ContextMenuAttach("ctxOrders")
	
'set context menu for shipments grid
Gui.f_Main..ContextMenuCreate("ctxShip")
Gui.f_Main.GsGCShipment.ContextMenuAttach("ctxShip")
	

'check to see if the user is in the TASEC security group. If not, don't open the screen
F.Global.Security.IsInGroup(V.Caller.User, "TASEC", V.Caller.CompanyCode, V.Local.bSecGroup)
F.Intrinsic.Control.If(V.Local.bSecGroup,=,False)

	Gui.f_Main..ContextMenuAddItem("ctxCustomer", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxCustomer", "Refresh", "MenuClickRefreshCustomer")
	
	Gui.f_Main..ContextMenuAddItem("ctxVendor", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxVendor", "Refresh", "MenuClickRefreshVendor")
	
	Gui.f_Main..ContextMenuAddItem("ctxOrders", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxOrders", "Refresh", "MenuClickRefreshOrders")
	
	Gui.f_Main..ContextMenuAddItem("ctxShip", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxShip", "Refresh", "MenuClickRefreshShipments")
F.Intrinsic.Control.Else
	
	'add check for if the user has security to do this. But for demo leave as shown
	Gui.f_Main..ContextMenuAddItem("ctxCustomer", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuAddItem("ctxCustomer", "PushUpdate", 0, "Push Update")
	Gui.f_Main..ContextMenuAddItem("ctxCustomer", "SelectAll", 0, "Select All")
	Gui.f_Main..ContextMenuAddItem("ctxCustomer", "DeselectAll", 0, "Deselect All")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxCustomer","PushUpdate", "MenuClickUpdateCustomer")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxCustomer", "SelectAll", "MenuClickSelectCustomers")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxCustomer","DeselectAll", "MenuClickDeselectCustomers")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxCustomer", "Refresh", "MenuClickRefreshCustomer")
	
	'add check for if the user has security to do this. But for demo leave as shown
	Gui.f_Main..ContextMenuAddItem("ctxVendor", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuAddItem("ctxVendor", "PushUpdate", 0, "Push Update")
	Gui.f_Main..ContextMenuAddItem("ctxVendor", "SelectAll", 0, "Select All")
	Gui.f_Main..ContextMenuAddItem("ctxVendor", "DeselectAll", 0, "Deselect All")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxVendor","PushUpdate", "MenuClickUpdateVendor")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxVendor", "SelectAll", "MenuClickSelectVendors")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxVendor","DeselectAll", "MenuClickDeselectVendors")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxVendor", "Refresh", "MenuClickRefreshVendor")
	
	'add check for if the user has security to do this. But for demo leave as shown
	Gui.f_Main..ContextMenuAddItem("ctxOrders", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuAddItem("ctxOrders", "PushUpdate", 0, "Push Update")
	Gui.f_Main..ContextMenuAddItem("ctxOrders", "SelectAll", 0, "Select All")
	Gui.f_Main..ContextMenuAddItem("ctxOrders", "DeselectAll", 0, "Deselect All")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxOrders","PushUpdate", "MenuClickUpdateOrders")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxOrders", "SelectAll", "MenuClickSelectOrders")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxOrders","DeselectAll", "MenuClickDeselectOrders")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxOrders", "Refresh", "MenuClickRefreshOrders")
	
	'add check for if the user has security to do this. But for demo leave as shown
	Gui.f_Main..ContextMenuAddItem("ctxShip", "Refresh", 0, "Refresh")
	Gui.f_Main..ContextMenuAddItem("ctxShip", "PushUpdate", 0, "Push Update")
	Gui.f_Main..ContextMenuAddItem("ctxShip", "SelectAll", 0, "Select All")
	Gui.f_Main..ContextMenuAddItem("ctxShip", "DeselectAll", 0, "Deselect All")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxShip","PushUpdate", "MenuClickUpdateShipments")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxShip", "SelectAll", "MenuClickSelectShipments")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxShip","DeselectAll", "MenuClickDeselectShipments")
	Gui.f_Main..ContextMenuSetItemEventHandler("ctxShip", "Refresh", "MenuClickRefreshShipments")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.SetContextMenus.End

Program.Sub.MenuClickRefreshCustomer.Start
F.Intrinsic.Control.Try
V.Local.sCust.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCnt.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)


F.Intrinsic.UI.InvokeWaitDialog("Refreshing Customer Grid...", "Please Wait")

Gui.f_Main.cmdSearch.Enabled(False)


'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtCust.Exists)
	F.Data.DataTable.Close("dtCust")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtCust", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.Else
		F.Data.DataTable.CreateFromSQL("dtCust", "con",  "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER ORDER BY CUSTOMER", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER  ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtCust", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf
'pull in the Ship TOs for each customer
F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.Else
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP  ORDER BY CUSTOMER", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, CUSTOMER_NAME AS NAME_CUSTOMER, SHIP_SEQ AS SHIP_TO, '' AS TCS_STATUS FROM V_OE_MULTI_SHIP ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf
'merge the ship to datatable into the dtcust table
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)

'check to see if Datatable exists
F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists)
	F.Data.DataTable.Close("dtTemp")
F.Intrinsic.Control.EndIf
F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'check to see if the customer textbox is populated
	F.Intrinsic.Control.If(V.Screen.f_Main!txtCustSrch.Text,<>,"")
		V.Local.sCust.Set(V.Screen.f_Main!txtCustSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}' ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.Else
		F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER ORDER BY CUSTOMER", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, CUSTOMER, NAME_CUSTOMER, '000000' AS SHIP_TO, '' AS TCS_STATUS FROM V_CUSTOMER_MASTER ORDER BY CUSTOMER", V.Local.sCust.Trim,V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf
'merge the ship to datatable into the dtcust table
F.Data.DataTable.Merge("dtTemp", "dtCust", True, 1)

F.Intrinsic.Control.If(V.DataTable.dtCust.RowCount--,>,-1)
	'check to see if the customer dataview exists. if it does, close it
	F.Intrinsic.Control.If(V.DataView.dtCust!dvCust.Exists,=,True)
		F.Data.DataView.Close("dtCust", "dvCust")
	F.Intrinsic.Control.EndIf
	'create a dataview to sort the datatable by the customer 
	F.Data.DataView.Create("dtCust", "dvCust",22, "", "[CUSTOMER] ASC, [SHIP_TO] ASC")
	'check to make sure the temp dtcust table doesn't exist. if it does, close it
	F.Intrinsic.Control.If(v.DataTable.dtCustTemp.Exists,=,True)
		F.Data.DataTable.Close("dtCustTemp")
	F.Intrinsic.Control.EndIf
	'copy the sorted dataview to the temp dtcust table
	F.Data.DataView.ToDataTable("dtCust", "dvCust", "dtCustTemp", True)
	'delete all the rows in the dtcust table to make sure the merged rows aren't added to it
	F.Data.DataTable.DeleteRow("dtCust")
	F.Data.DataTable.AcceptChanges("dtCust")
	'merge the temp dtcust table into the dtcust table to get the sorted table
	F.Data.DataTable.Merge("dtCustTemp", "dtCust", True, 1)
	
	'load the Trade Automation Status for each record
	'loop through the datatable and query the custom table to get status
	F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtCust.RowCount--,1)
		'get the TCS status for the header ship to
		F.Intrinsic.Control.If(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim,=,"")
			V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
			F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sCustomer.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
				F.Intrinsic.Control.Case("N")
					V.Local.sStatus.Set("No Match, Approved")
				F.Intrinsic.Control.Case("P")
					V.Local.sStatus.Set("Potential Match")
				F.Intrinsic.Control.Case("M")
					V.Local.sStatus.Set("Match")
				F.Intrinsic.Control.Case("X")
					V.Local.sStatus.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Unscreened Address")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Else
		'get the TCS Status for the additional ship to
			V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iCnt).CUSTOMER!FieldValTrim)
			V.Local.sShipTo.Set(V.DataTable.dtCust(V.Local.iCnt).SHIP_TO!FieldValTrim)
			F.Intrinsic.String.Build("{0}_{1}", V.Local.sCustomer.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
			F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'C' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
				F.Intrinsic.Control.Case("N")
					V.Local.sStatus.Set("No Match, Approved")
				F.Intrinsic.Control.Case("P")
					V.Local.sStatus.Set("Potential Match")
				F.Intrinsic.Control.Case("M")
					V.Local.sStatus.Set("Match")
				F.Intrinsic.Control.Case("X")
					V.Local.sStatus.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Unscreened Address")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.SetValue("dtCust", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
F.Intrinsic.Control.EndIf

Gui.f_Main.txtCustSrch.Text("")

'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatCustGrid)

F.Intrinsic.UI.CloseWaitDialog
Gui.f_Main.cmdSearch.Enabled(True)
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickRefreshCustomer.End

Program.Sub.MenuClickUpdateCustomer.Start
F.Intrinsic.Control.Try
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iCnt3.Declare(Long)
V.Local.iRet.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sSelectedRows.Declare(String)
V.Local.iRow.Declare(Long)
V.Local.sCustomer.Declare(String)
V.Local.sShipToID.Declare(String)
V.Local.sPartnerID.Declare(String)
V.Local.sEndUserDesig.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sTempFQP.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSAPCode.Declare(String)
V.Local.sOrgCode.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sB2Name.Declare(String)
V.Local.sB2Addr1.Declare(String)
V.Local.sB2Addr2.Declare(String)
V.Local.sB2Addr3.Declare(String)
V.Local.sB2Addr4.Declare(String)
V.Local.sB2Addr5.Declare(String)
V.Local.sB2City.Declare(String)
V.Local.sB2State.Declare(String)
V.Local.sB2Zip.Declare(String)
V.Local.sB2Country.Declare(String)
V.Local.sS2Name.Declare(String)
V.Local.sS2Addr1.Declare(String)
V.Local.sS2Addr2.Declare(String)
V.Local.sS2Addr3.Declare(String)
V.Local.sS2Addr4.Declare(String)
V.Local.sS2Addr5.Declare(String)
V.Local.sS2City.Declare(String)
V.Local.sS2State.Declare(String)
V.Local.sS2Zip.Declare(String)
V.Local.sS2Country.Declare(String)
V.Local.sSICCode.Declare(String)
V.Local.sRet2.Declare(String)
V.Local.sRet3.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.sDate.Declare(String)
V.Local.sTime.Declare(String)
V.Local.sDateTime.Declare(String)
V.Local.sFQP.Declare(String)
V.Local.sRet4.Declare(String)
V.Local.sEndUserDesigTemp.Declare(String)
V.Local.sIntercompany.Declare(String)

V.Global.sSubmitType.Set("CUSTOMER")
'set the sender value
F.Intrinsic.String.Build("GSS_{0}", V.Caller.CompanyCode, V.Local.sSender)

'build file path for sample datapacket
F.Intrinsic.String.Build("{0}\tempPartner.xml", V.Caller.FilesDir, V.Local.sTempFQP)

'Check to see if the datatable already exists. If it does, close it
F.Intrinsic.Control.If(V.DataTable.Envelope.Exists)
	F.Data.DataTable.Close("envelope")
F.Intrinsic.Control.EndIf
'load sample packet into datatbale
F.Data.DataTable.CreateDatasetFromXML("envelope", V.Local.sTempFQP, True)

'ask the user if they are sure they want to continue with the push
F.Intrinsic.UI.Msgbox("Are you sure you want to Push the selected Customers to Trade Automation?", "Warning",4, V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet,=, 6)
	'if the user selects yes, continue	
	f.Data.DataTable.AcceptChanges("dtCust")
	'get the rows where the SEL column = 1 - meaning the user has selected it for screening
	F.Data.DataTable.Select("dtCust", "[SEL] = 1", V.Local.sSelectedRows)
	'check to see if any records were returned
	F.Intrinsic.Control.If(V.Local.sSelectedRows.Trim,<>,"***NORETURN***")
		F.Intrinsic.String.Split(V.Local.sSelectedRows,"*!*", v.Local.sSelectedRows)
		'query custom cocode maint to get the SAP code for the company code
		F.Intrinsic.String.Build("SELECT SAP_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}'", V.Caller.CompanyCode, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			V.Local.sSAPCode.Set(V.Local.sRet.Trim)
			F.Intrinsic.String.Build("SELECT ORG_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}' AND SAP_CODE = '{1}'", V.Caller.CompanyCode, V.Local.sSAPCode, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sOrgCode)
			V.Local.sOrgCode.Set("TEC_MASTER")
			
			F.Intrinsic.Control.For(V.Local.iCnt,0, V.Local.sSelectedRows.UBound,1)
				'set the row that corresponds to the selected value
				V.Local.iRow.Set(V.Local.sSelectedRows(V.Local.iCnt).Long)
				'use the row number to get the customer data the user wants to screen
				V.Local.sCustomer.Set(V.DataTable.dtCust(V.Local.iRow).CUSTOMER!FieldValTrim)
				V.Local.sShipToID.Set(V.DataTable.dtCust(V.Local.iRow).SHIP_TO!FieldValTrim)
				F.Intrinsic.String.Build("SELECT INTERCOMPANY FROM V_CUSTOMER_MASTER WHERE CUSTOMER = '{0}'", v.Local.sCustomer.Trim, v.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sIntercompany)
	
				'check to see which ship to value they are screening
				F.Intrinsic.Control.If(V.Local.sShipToID.Trim,=,"")
					'if they have selected a value with no ship to ID, it means they want to send the Bill To address to TA for rescreening
					V.Local.sPartnerID.Set(V.Local.sCustomer.Trim)
					F.Intrinsic.String.Build("{0}_QB{1}", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sCust)
					'we need to query customer master to get the address information
					F.Intrinsic.String.Build("SELECT A.NAME_CUSTOMER, A.ADDRESS1, A.ADDRESS2, B.ADDRESS3, B.ADDRESS4, B.ADDRESS5, A.CITY, A.STATE, A.ZIP, A.COUNTRY, C.CODE_SIC FROM V_CUSTOMER_MASTER A LEFT JOIN V_CUSTOMER_INTL B ON A.CUSTOMER = B.CUSTOMER LEFT JOIN V_CUSTOMER_SALES C ON A.CUSTOMER = C.CUSTOMER WHERE A.CUSTOMER = '{0}'", V.Local.sCustomer.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
					F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
						F.Intrinsic.String.Split(V.Local.sRet2, "*!*", V.Local.sRet2)
						V.Local.sB2Name.Set(V.Local.sRet2(0).Trim)
						V.Local.sB2Addr1.Set(V.Local.sRet2(1).Trim)
						V.Local.sB2Addr2.Set(V.Local.sRet2(2).Trim)
						V.Local.sB2Addr3.Set(V.Local.sRet2(3).Trim)
						V.Local.sB2Addr4.Set(V.Local.sRet2(4).Trim)
						V.Local.sB2Addr5.Set(V.Local.sRet2(5).Trim)
						V.Local.sB2City.Set(V.Local.sRet2(6).Trim)
						V.Local.sB2State.Set(V.Local.sRet2(7).Trim)
						V.Local.sB2Zip.Set(V.Local.sRet2(8).Trim)
						V.Local.sB2Country.Set(V.Local.sRet2(9).Trim)
						V.Local.sSICCode.Set(V.Local.sRet2(10).Trim)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.sB2Addr5.Trim,<>,"")
						F.Intrinsic.String.Build("{0} {1}", V.Local.sB2Addr4.Trim, V.Local.sB2Addr5.Trim, V.Local.sB2Addr4)
					F.Intrinsic.Control.EndIf
			
					
					'pull the end user designation from the header if no record is found
					F.Intrinsic.String.Build("SELECT END_USER_DESIG FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sCustomer.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sEndUserDesig)
					F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
							V.Local.sEndUserDesigTemp.Set("MILITARY")
						F.Intrinsic.Control.Else
							V.Local.sEndUserDesigTemp.Set("CIVIL")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.UI.Msgbox("You must select an End User Designation before you can continue!", "Required Field")
						'show custom browser that allows the user to select an end user designation
						F.Intrinsic.UI.BrowserFromString("Select an End User Designation","CIVIL*!*OIL & GAS*!*MILITARY", "@!@", "*!*", "End User Designation", "500",V.Local.sRet3)
						F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"***CANCEL***")
							V.Local.sEndUserDesig.Set(V.Local.sRet3.Trim)
							F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
								V.Local.sEndUserDesigTemp.Set("MILITARY")
							F.Intrinsic.Control.Else
								V.Local.sEndUserDesigTemp.Set("CIVIL")
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					'loop through dtXML to set the corresponding data needed
					'columns for dtXML
					'ACTION, COMPANY_CODE, ORG_CODE, PRIORITY, MESSAGE_TYPE, USERID, RECEIVER, SENDER, BATCH_ID
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
						'need to update sender and batch id
						F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
			
					'loop through dtXML$BusKey to set the corresponding data needed
					'columns for dtXML$BusKey
					'PTNR_ID, ORG_CODE
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Bus_Key.RowCount--,1)
						'need to update the partner id
						F.Data.DataTable.SetValue("envelope$Bus_Key", V.Local.iCnt3, "PTNR_ID", V.Local.sCust.Trim, "ORG_CODE", v.Local.sOrgCode.Trim)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					'loop through dtXML$Partner to set the corresponding data needed
					'columns for dtXML$Partner
					'ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY_CODE, END_USER_DESIGNATION, NAME, ORG_CODE, POSTAL_CODE, PTNR_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_PARTNER_ID, WWIC, IBC, EPCI_FLAG
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
						'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
						F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "ORG_CODE", v.Local.sOrgCode.Trim,"ADDRESS_LINE1", V.Local.sB2Addr1.Trim, "ADDRESS_LINE2", V.Local.sB2Addr2.Trim, "ADDRESS_LINE3", V.Local.sB2Addr3.Trim, "ADDRESS_LINE4", V.Local.sB2Addr4.Trim, "CITY", V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sB2Country.Trim, "NAME", V.Local.sB2Name.Trim, "END_USER_DESIGNATION", V.Local.sEndUserDesigTemp.Trim,"POSTAL_CODE", V.Local.sB2Zip.Trim, "PTNR_ID", V.Local.sCust.Trim,"SOURCE_SYSTEM", V.Local.sSender.Trim,  "SOURCE_SYSTEM_PARTNER_ID", V.Local.sCust.Trim, "WWIC", V.Local.sSICCode.Trim, "IBC", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					F.Intrinsic.Control.If(V.Local.sIntercompany.Trim,=,"Y")
						'check to see if the customer is intercompany. If they are, set the related party to 'Y'
						F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
							'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
							F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "RELATED_PARTY", "Y")
						F.Intrinsic.Control.Next(V.Local.iCnt3)
					F.Intrinsic.Control.EndIf
					
					'build date time
					f.Intrinsic.UI.Sleep(1)
					V.Local.dDate.Set(V.Ambient.Date)
					F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
					F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
					F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)
					
					'query custom partner table to see if a record exists. If it does, update it. If it doesnt, insert a record
					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
					F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
					
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
							
						F.Intrinsic.String.Build("UPDATE GCG_6625_PARTNER SET DECISION = 'X', DATE_TIME = '{0}', END_USER_DESIG = '{1}' WHERE CO_CODE = '{2}' AND PARTNER_ID = '{3}' AND PARTNER_TYPE = 'C'", V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.ElseIf(V.Local.sRet4.Trim,=,"")
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
						'add record to custom partner table
						F.Intrinsic.String.Build("INSERT INTO GCG_6625_PARTNER (CO_CODE, PARTNER_ID, PARTNER_TYPE, DECISION, CRIMEA_HOLD, DATE_TIME, END_USER_DESIG) VALUES ('{0}', '{1}', 'C','X', 0,'{2}', '{3}')", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
				
					
				F.Intrinsic.Control.ElseIf(V.Local.sShipToID.Trim,=,"000000")
					'if they have selected a value with 000000 as the ship to ID, it means they want to send the main Ship To address to TA for rescreening
					F.Intrinsic.String.Build("{0}_000000", V.Local.sCustomer.Trim, V.Local.sPartnerID)
					F.Intrinsic.String.Build("{0}_QB{1}_000000", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sCust)
					'we need to query customer master to get the address information
					F.Intrinsic.String.Build("SELECT A.NAME_CUSTOMER_SHIP, A.ADDRESS1_SHIP, A.ADDRESS2_SHIP, B.ADDRESS3_SHIP, B.ADDRESS4_SHIP, B.ADDRESS5_SHIP, A.CITY_SHIP, A.STATE_SHIP, A.CODE_ZIP_SHIP, A.COUNTRY_SHIP, C.CODE_SIC FROM V_CUSTOMER_SHIPTO A LEFT JOIN V_CUSTOMER_INTL B ON A.CUSTOMER = B.CUSTOMER LEFT JOIN V_CUSTOMER_SALES C ON A.CUSTOMER = C.CUSTOMER WHERE A.CUSTOMER = '{0}'", V.Local.sCustomer.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
					F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
						F.Intrinsic.String.Split(V.Local.sRet2, "*!*", V.Local.sRet2)
						V.Local.sS2Name.Set(V.Local.sRet2(0).Trim)
						V.Local.sS2Addr1.Set(V.Local.sRet2(1).Trim)
						V.Local.sS2Addr2.Set(V.Local.sRet2(2).Trim)
						V.Local.sS2Addr3.Set(V.Local.sRet2(3).Trim)
						V.Local.sS2Addr4.Set(V.Local.sRet2(4).Trim)
						V.Local.sS2Addr5.Set(V.Local.sRet2(5).Trim)
						V.Local.sS2City.Set(V.Local.sRet2(6).Trim)
						V.Local.sS2State.Set(V.Local.sRet2(7).Trim)
						V.Local.sS2Zip.Set(V.Local.sRet2(8).Trim)
						V.Local.sS2Country.Set(V.Local.sRet2(9).Trim)
						V.Local.sSICCode.Set(V.Local.sRet2(10).Trim)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.sS2Addr5.Trim,<>,"")
						F.Intrinsic.String.Build("{0} {1}", V.Local.sS2Addr4.Trim, V.Local.sS2Addr5.Trim, V.Local.sS2Addr4)
					F.Intrinsic.Control.EndIf
					'pull the end user designation from the header if no record is found
					F.Intrinsic.String.Build("SELECT END_USER_DESIG FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sEndUserDesig)
					F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
							V.Local.sEndUserDesigTemp.Set("MILITARY")
						F.Intrinsic.Control.Else
							V.Local.sEndUserDesigTemp.Set("CIVIL")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.UI.Msgbox("You must select an End User Designation before you can continue!", "Required Field")
						'show custom browser that allows the user to select an end user designation
						F.Intrinsic.UI.BrowserFromString("Select an End User Designation","CIVIL*!*OIL & GAS*!*MILITARY", "@!@", "*!*", "End User Designation", "500",V.Local.sRet3)
						F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"***CANCEL***")
							V.Local.sEndUserDesig.Set(V.Local.sRet3.Trim)
							F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
								V.Local.sEndUserDesigTemp.Set("MILITARY")
							F.Intrinsic.Control.Else
								V.Local.sEndUserDesigTemp.Set("CIVIL")
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					'loop through dtXML to set the corresponding data needed
					'columns for dtXML
					'ACTION, COMPANY_CODE, ORG_CODE, PRIORITY, MESSAGE_TYPE, USERID, RECEIVER, SENDER, BATCH_ID
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
						'need to update sender and batch id
						F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
			
					'loop through dtXML$BusKey to set the corresponding data needed
					'columns for dtXML$BusKey
					'PTNR_ID, ORG_CODE
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Bus_Key.RowCount--,1)
						'need to update the partner id
						F.Data.DataTable.SetValue("envelope$Bus_Key", V.Local.iCnt3, "PTNR_ID", V.Local.sCust.Trim, "ORG_CODE", v.Local.sOrgCode.Trim)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					'loop through dtXML$Partner to set the corresponding data needed
					'columns for dtXML$Partner
					'ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY_CODE, END_USER_DESIGNATION, NAME, ORG_CODE, POSTAL_CODE, PTNR_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_PARTNER_ID, WWIC, IBC, EPCI_FLAG
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
						'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
						F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "ORG_CODE", v.Local.sOrgCode.Trim,"ADDRESS_LINE1", V.Local.sS2Addr1.Trim, "ADDRESS_LINE2", V.Local.sS2Addr2.Trim,"ADDRESS_LINE3",V.Local.sS2Addr3.Trim, "ADDRESS_LINE4", v.Local.sS2Addr4.Trim, "CITY", V.Local.sS2City.Trim, "COUNTRY_CODE", V.Local.sS2Country.Trim, "NAME", V.Local.sS2Name.Trim, "END_USER_DESIGNATION", V.Local.sEndUserDesigTemp.Trim,"POSTAL_CODE", V.Local.sS2Zip.Trim, "PTNR_ID", V.Local.sCust.Trim,"SOURCE_SYSTEM", V.Local.sSender.Trim,  "SOURCE_SYSTEM_PARTNER_ID", V.Local.sCust.Trim, "WWIC", V.Local.sSICCode.Trim, "IBC", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					F.Intrinsic.Control.If(V.Local.sIntercompany.Trim,=,"Y")
						'check to see if the customer is intercompany. If they are, set the related party to 'Y'
						F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
							'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
							F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "RELATED_PARTY", "Y")
						F.Intrinsic.Control.Next(V.Local.iCnt3)
					F.Intrinsic.Control.EndIf
					
					'build date time
					f.Intrinsic.UI.Sleep(1)
					V.Local.dDate.Set(V.Ambient.Date)
					F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
					F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
					F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)
					
					'query custom partner table to see if a record exists. If it does, update it. If it doesnt, insert a record
					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
					F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
					
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
							
						F.Intrinsic.String.Build("UPDATE GCG_6625_PARTNER SET DECISION = 'X', DATE_TIME = '{0}', END_USER_DESIG = '{1}' WHERE CO_CODE = '{2}' AND PARTNER_ID = '{3}' AND PARTNER_TYPE = 'C'", V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.ElseIf(V.Local.sRet4.Trim,=,"")
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
						'add record to custom partner table
						F.Intrinsic.String.Build("INSERT INTO GCG_6625_PARTNER (CO_CODE, PARTNER_ID, PARTNER_TYPE, DECISION, CRIMEA_HOLD, DATE_TIME, END_USER_DESIG) VALUES ('{0}', '{1}', 'C','X', 0,'{2}', '{3}')", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
			
				F.Intrinsic.Control.Else
					'if they have selected a value other than the above to, it means they want an additional ship to address to be sent to TA for rescreening
					F.Intrinsic.String.Build("{0}_{1}", V.Local.sCustomer.Trim, v.Local.sShipToID.Trim, V.Local.sPartnerID)
					F.Intrinsic.String.Build("{0}_QB{1}_{2}", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sShipToID.Trim, V.Local.sCust)
					'we need to query customer master to get the address information
					F.Intrinsic.String.Build("SELECT A.CUSTOMER_NAME, A.SHIP_ADDRESS1, A.SHIP_ADDRESS2, A.SHIP_ADDRESS3, A.SHIP_ADDRESS4, A.SHIP_ADDRESS5, A.SHIP_CITY, A.SHIP_STATE, A.SHIP_ZIP, A.SHIP_COUNTRY, C.CODE_SIC FROM V_OE_MULTI_SHIP A LEFT JOIN V_CUSTOMER_SALES C ON A.CUSTOMER = C.CUSTOMER WHERE A.CUSTOMER = '{0}' AND A.SHIP_SEQ = '{1}'", V.Local.sCustomer.Trim, V.Local.sShipToID.Trim,V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
					F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
						F.Intrinsic.String.Split(V.Local.sRet2, "*!*", V.Local.sRet2)
						V.Local.sS2Name.Set(V.Local.sRet2(0).Trim)
						V.Local.sS2Addr1.Set(V.Local.sRet2(1).Trim)
						V.Local.sS2Addr2.Set(V.Local.sRet2(2).Trim)
						V.Local.sS2Addr3.Set(V.Local.sRet2(3).Trim)
						V.Local.sS2Addr4.Set(V.Local.sRet2(4).Trim)
						V.Local.sS2Addr5.Set(V.Local.sRet2(5).Trim)
						V.Local.sS2City.Set(V.Local.sRet2(6).Trim)
						V.Local.sS2State.Set(V.Local.sRet2(7).Trim)
						V.Local.sS2Zip.Set(V.Local.sRet2(8).Trim)
						V.Local.sS2Country.Set(V.Local.sRet2(9).Trim)
						V.Local.sSICCode.Set(V.Local.sRet2(10).Trim)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.sS2Addr5.Trim,<>,"")
						F.Intrinsic.String.Build("{0} {1}", V.Local.sS2Addr4.Trim, V.Local.sS2Addr5.Trim, V.Local.sS2Addr4)
					F.Intrinsic.Control.EndIf
					
					'pull the end user designation from the header if no record is found
					F.Intrinsic.String.Build("SELECT END_USER_DESIG FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sEndUserDesig)
					F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
							V.Local.sEndUserDesigTemp.Set("MILITARY")
						F.Intrinsic.Control.Else
							V.Local.sEndUserDesigTemp.Set("CIVIL")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.UI.Msgbox("You must select an End User Designation before you can continue!", "Required Field")
						'show custom browser that allows the user to select an end user designation
						F.Intrinsic.UI.BrowserFromString("Select an End User Designation","CIVIL*!*OIL & GAS*!*MILITARY", "@!@", "*!*", "End User Designation", "500",V.Local.sRet3)
						F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"***CANCEL***")
							V.Local.sEndUserDesig.Set(V.Local.sRet3.Trim)
							F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
								V.Local.sEndUserDesigTemp.Set("MILITARY")
							F.Intrinsic.Control.Else
								V.Local.sEndUserDesigTemp.Set("CIVIL")
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					'loop through dtXML to set the corresponding data needed
					'columns for dtXML
					'ACTION, COMPANY_CODE, ORG_CODE, PRIORITY, MESSAGE_TYPE, USERID, RECEIVER, SENDER, BATCH_ID
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
						'need to update sender and batch id
						F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
			
					'loop through dtXML$BusKey to set the corresponding data needed
					'columns for dtXML$BusKey
					'PTNR_ID, ORG_CODE
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Bus_Key.RowCount--,1)
						'need to update the partner id
						F.Data.DataTable.SetValue("envelope$Bus_Key", V.Local.iCnt3, "PTNR_ID", V.Local.sCust.Trim, "ORG_CODE", v.Local.sOrgCode.Trim)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					'loop through dtXML$Partner to set the corresponding data needed
					'columns for dtXML$Partner
					'ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY_CODE, END_USER_DESIGNATION, NAME, ORG_CODE, POSTAL_CODE, PTNR_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_PARTNER_ID, WWIC, IBC, EPCI_FLAG
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
						'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
						F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "ORG_CODE", v.Local.sOrgCode.Trim,"ADDRESS_LINE1", V.Local.sS2Addr1.Trim, "ADDRESS_LINE2", V.Local.sS2Addr2.Trim, "ADDRESS_LINE3",V.Local.sS2Addr3.Trim, "ADDRESS_LINE4", v.Local.sS2Addr4.Trim, "CITY", V.Local.sS2City.Trim, "COUNTRY_CODE", V.Local.sS2Country.Trim, "NAME", V.Local.sS2Name.Trim, "END_USER_DESIGNATION", V.Local.sEndUserDesigTemp.Trim,"POSTAL_CODE", V.Local.sS2Zip.Trim, "PTNR_ID", V.Local.sCust.Trim,"SOURCE_SYSTEM", V.Local.sSender.Trim,  "SOURCE_SYSTEM_PARTNER_ID", V.Local.sCust.Trim, "WWIC", V.Local.sSICCode.Trim, "IBC", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					F.Intrinsic.Control.If(V.Local.sIntercompany.Trim,=,"Y")
						'check to see if the customer is intercompany. If they are, set the related party to 'Y'
						F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
							'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
							F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "RELATED_PARTY", "Y")
						F.Intrinsic.Control.Next(V.Local.iCnt3)
					F.Intrinsic.Control.EndIf
					
					'build date time
					F.Intrinsic.UI.Sleep(1)
					V.Local.dDate.Set(V.Ambient.Date)
					F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
					F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
					F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)
					
					'query custom partner table to see if a record exists. If it does, update it. If it doesnt, insert a record
					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
					F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
					
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
							
						F.Intrinsic.String.Build("UPDATE GCG_6625_PARTNER SET DECISION = 'X', DATE_TIME = '{0}', END_USER_DESIG = '{1}' WHERE CO_CODE = '{2}' AND PARTNER_ID = '{3}' AND PARTNER_TYPE = 'C'", V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.ElseIf(V.Local.sRet4.Trim,=,"")
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
						'add record to custom partner table
						F.Intrinsic.String.Build("INSERT INTO GCG_6625_PARTNER (CO_CODE, PARTNER_ID, PARTNER_TYPE, DECISION, CRIMEA_HOLD, DATE_TIME, END_USER_DESIG) VALUES ('{0}', '{1}', 'C','X', 0,'{2}', '{3}')", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
				F.Intrinsic.Control.EndIf
				
				'build date time
				V.Local.dDate.Set(V.Ambient.Date)
				F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
				F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
				F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)

				'Callsub to get the HTTP settings
				F.Intrinsic.Control.CallSub(HTTPSettings)
				'callsub to process the XML
				F.Intrinsic.Control.CallSub(ProcessXML)
				
				F.Data.DataTable.SetValue("dtCust", V.Local.iRow, "TCS_STATUS","Awaiting TCS Status")
				F.Data.DataTable.SetValue("dtCust", V.Local.iRow, "SEL",0)
				
				f.Intrinsic.UI.Sleep(1)
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.Else
			'if no SAP Code found, don't allow them to continue
			F.Intrinsic.UI.Msgbox("The SAP Code has not been set up for this Company Code. You need to setup the associated SAP Code via System Support > Administration > TCS Maintenance (6625)", "Required Data")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickUpdateCustomer.End

Program.Sub.MenuClickSelectCustomers.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtCust.RowCount--,>,-1)
	'set the SEL value to 1 for all records
	F.Data.DataTable.SetValue("dtCust",-1, "SEL", 1)
	F.Data.DataTable.AcceptChanges("dtCust")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickSelectCustomers.End

Program.Sub.MenuClickDeselectCustomers.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtCust.RowCount--,>,-1)
	'set the SEL value to 0 for all records
	F.Data.DataTable.SetValue("dtCust",-1, "SEL", 0)
	F.Data.DataTable.AcceptChanges("dtCust")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickDeselectCustomers.End

Program.Sub.MenuClickRefreshVendor.Start
F.Intrinsic.Control.Try
V.Local.sVendor.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.iCnt.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)


F.Intrinsic.UI.InvokeWaitDialog("Refreshing Vendor Grid...", "Please Wait")

Gui.f_Main.cmdSearch.Enabled(False)
'check to see if datatable exists
F.Intrinsic.Control.If(V.DataTable.dtVendor.Exists,=,True)
	F.Data.DataTable.Close("dtVendor")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
	'create the datatable from vendor master
	F.Intrinsic.Control.If(V.Screen.f_Main!txtVendSrch.Text,<>,"")
		V.Local.sVendor.Set(V.Screen.f_Main!txtVendSrch.Text)
		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '{0}' ORDER BY VENDOR", V.Local.sVendor.Trim, V.Local.sSQL)
		F.Data.DataTable.CreateFromSQL("dtVendor", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.Else
		F.Data.DataTable.CreateFromSQL("dtVendor", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER ORDER BY VENDOR", True)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
	'create the datatable from vendor master
		F.Data.DataTable.CreateFromSQL("dtVendor", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '' AS VEND_ID, 'Buy From' AS VEND_TYPE FROM V_VENDOR_MASTER ORDER BY VENDOR", True)
F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
'	F.Data.DataTable.Close("dtTemp")
'F.Intrinsic.Control.EndIf

'F.Intrinsic.Control.If(V.Global.bEmptyDT,=,False)
'	'create the datatable from vendor master
'	F.Intrinsic.Control.If(V.Screen.f_Main!txtVendSrch.Text,<>,"")
'		V.Local.sVendor.Set(V.Screen.f_Main!txtVendSrch.Text)
'		F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '{0}' ORDER BY VENDOR", V.Local.sVendor.Trim, V.Local.sSQL)
'		F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
'	F.Intrinsic.Control.Else
'		F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER ORDER BY VENDOR", True)
'	F.Intrinsic.Control.EndIf
'F.Intrinsic.Control.ElseIf(V.Global.bEmptyDT,=,True)
'	'create the datatable from vendor master
'	F.Data.DataTable.CreateFromSQL("dtTemp", "con", "SELECT CONVERT(0, SQL_BIT) AS SEL, VENDOR, NAME_VENDOR, '' AS TCS_STATUS, '000000' AS VEND_ID, 'Pay To' AS VEND_TYPE FROM V_VENDOR_MASTER WHERE VENDOR = '' AND NAME_VENDOR = '' ORDER BY VENDOR", True)
'F.Intrinsic.Control.EndIf

'merge the temp table into the dtvend table
'F.Data.DataTable.Merge("dtTemp", "dtVendor", True,1)

'check to see if the dataview exists, if it does, close it
F.Intrinsic.Control.If(V.DataView.dtVendor!dvVend.Exists,=,True)
	F.Data.DataView.Close("dtVendor", "dvVend")
F.Intrinsic.Control.EndIf

'create the dataview to sort the records by vendor, vend id
F.Data.DataView.Create("dtVendor", "dvVend", 22, "", "[VENDOR] ASC")
'check to see if the temp vendor datatable exists. if it does, close it
F.Intrinsic.Control.If(v.DataTable.dtTempVend.Exists,=,True)
	F.Data.DataTable.Close("dtTempVend")
F.Intrinsic.Control.EndIf

'transfer the dataview to a datatable
F.Data.DataView.ToDataTable("dtVendor", "dvVend", "dtTempVend" ,True)
'merge the temp dtvend table into dtvendor
'Delete the existing rows in the datatable so that it doesn't create duplicates
F.Data.DataTable.DeleteRow("dtVendor")
F.Data.DataTable.AcceptChanges("dtVendor")
F.Data.DataTable.Merge("dtTempVend", "dtVendor", True, 1)
'close the temp dtvend
F.Data.DataTable.Close("dtTempVend")

F.Intrinsic.Control.If(V.DataTable.dtVendor.RowCount--,>,-1)
	'load the Trade Automation Status for each record
	'loop through the datatable and query the custom table to get status
	F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtVendor.RowCount--,1)
		'get the TCS status for the vendor addresses
		F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VEND_ID!FieldValTrim,<>,"000000")
			V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
			F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sVendor.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
				F.Intrinsic.Control.Case("N")
					V.Local.sStatus.Set("No Match, Approved")
				F.Intrinsic.Control.Case("P")
					V.Local.sStatus.Set("Potential Match")
				F.Intrinsic.Control.Case("M")
					V.Local.sStatus.Set("Match")
				F.Intrinsic.Control.Case("X")
					V.Local.sStatus.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndSelect
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Unscreened Address")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
'		F.Intrinsic.Control.Else
'		'get the TCS Status for the other address
'			V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim)
'			F.Intrinsic.String.Build("{0}_000000", V.Local.sVendor.Trim, V.Local.sShipTo.Trim, V.Local.sPartnerID)
'			F.Intrinsic.String.Build("SELECT DECISION FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_TYPE = 'V' AND PARTNER_ID = '{1}'", V.Caller.CompanyCode, V.Local.sPartnerID, V.Local.sSQL)
'			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
'			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
'				F.Intrinsic.Control.SelectCase(V.Local.sRet.Trim)
'				F.Intrinsic.Control.Case("N")
'					V.Local.sStatus.Set("No Match, Approved")
'				F.Intrinsic.Control.Case("P")
'					V.Local.sStatus.Set("Potential Match")
'				F.Intrinsic.Control.Case("M")
'					V.Local.sStatus.Set("Match")
'				F.Intrinsic.Control.Case("X")
'					V.Local.sStatus.Set("Awaiting TCS Status")
'				F.Intrinsic.Control.EndSelect
'			F.Intrinsic.Control.Else
'				V.Local.sStatus.Set("Unscreened Address")
'			F.Intrinsic.Control.EndIf
'			
'			F.Data.DataTable.SetValue("dtVendor", V.Local.iCnt, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.EndIf
		
		'remove the company vendor reocrds
		F.Intrinsic.Control.If(V.DataTable.dtVendor(V.Local.iCnt).VENDOR!FieldValTrim,=,"")
			F.Data.DataTable.DeleteRow("dtVendor", V.Local.iCnt)
			F.Data.DataTable.AcceptChanges("dtVendor")
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.Next(V.Local.iCnt)
	
	'remove the vend_id column
	F.Data.DataTable.RemoveColumn("dtVendor", "VEND_ID")
F.Intrinsic.Control.EndIf

Gui.f_Main.txtVendSrch.Text("")
'callsub to format the vendor grid
F.Intrinsic.Control.CallSub(FormatVendorGrid)

F.Intrinsic.UI.CloseWaitDialog
Gui.f_Main.cmdSearch.Enabled(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickRefreshVendor.End

Program.Sub.MenuClickUpdateVendor.Start
F.Intrinsic.Control.Try
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iCnt3.Declare(Long)
V.Local.iRet.Declare(Long)
V.Local.sSQL.Declare(String)
V.Local.sSelectedRows.Declare(String)
V.Local.iRow.Declare(Long)
V.Local.sVendor.Declare(String)
V.Local.sShipToID.Declare(String)
V.Local.sPartnerID.Declare(String)
V.Local.sEndUserDesig.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sTempFQP.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSAPCode.Declare(String)
V.Local.sOrgCode.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sB2Name.Declare(String)
V.Local.sB2Addr1.Declare(String)
V.Local.sB2Addr2.Declare(String)
V.Local.sB2Addr3.Declare(String)
V.Local.sB2Addr4.Declare(String)
V.Local.sB2Addr5.Declare(String)
V.Local.sB2City.Declare(String)
V.Local.sB2State.Declare(String)
V.Local.sB2Zip.Declare(String)
V.Local.sB2Country.Declare(String)
V.Local.sS2Name.Declare(String)
V.Local.sS2Addr1.Declare(String)
V.Local.sS2Addr2.Declare(String)
V.Local.sS2Addr3.Declare(String)
V.Local.sS2Addr4.Declare(String)
V.Local.sS2Addr5.Declare(String)
V.Local.sS2City.Declare(String)
V.Local.sS2State.Declare(String)
V.Local.sS2Zip.Declare(String)
V.Local.sS2Country.Declare(String)
V.Local.sSICCode.Declare(String)
V.Local.sRet2.Declare(String)
V.Local.sRet3.Declare(String)
V.Local.dDate.Declare(Date)
V.Local.sDate.Declare(String)
V.Local.sTime.Declare(String)
V.Local.sDateTime.Declare(String)
V.Local.sFQP.Declare(String)
V.Local.sRet4.Declare(String)
V.Local.sEndUserDesigTemp.Declare(String)
V.Local.sAddressType.Declare(String)

V.Global.sSubmitType.Set("VENDOR")
'set the sender value
F.Intrinsic.String.Build("GSS_{0}", V.Caller.CompanyCode, V.Local.sSender)

'build file path for sample datapacket
F.Intrinsic.String.Build("{0}\tempVendor.xml", V.Caller.FilesDir, V.Local.sTempFQP)

'Check to see if the datatable already exists. If it does, close it
F.Intrinsic.Control.If(V.DataTable.Envelope.Exists)
	F.Data.DataTable.Close("envelope")
F.Intrinsic.Control.EndIf
'load sample packet into datatbale
F.Data.DataTable.CreateDatasetFromXML("envelope", V.Local.sTempFQP, True)


'ask the user if they are sure they want to continue with the push
F.Intrinsic.UI.Msgbox("Are you sure you want to Push the selected Vendors to Trade Automation?", "Warning",4, V.Local.iRet)
F.Intrinsic.Control.If(V.Local.iRet,=, 6)
	'if the user selects yes, continue	
	f.Data.DataTable.AcceptChanges("dtVendor")
	'get the rows where the SEL column = 1 - meaning the user has selected it for screening
	F.Data.DataTable.Select("dtVendor", "[SEL] = 1", V.Local.sSelectedRows)
	'check to see if any records were returned
	F.Intrinsic.Control.If(V.Local.sSelectedRows.Trim,<>,"***NORETURN***")
		F.Intrinsic.String.Split(V.Local.sSelectedRows,"*!*", v.Local.sSelectedRows)
		'query custom cocode maint to get the SAP code for the company code
		F.Intrinsic.String.Build("SELECT SAP_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}'", V.Caller.CompanyCode, V.Local.sSQL)
		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
		F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
			V.Local.sSAPCode.Set(V.Local.sRet.Trim)
			F.Intrinsic.String.Build("SELECT ORG_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}' AND SAP_CODE = '{1}'", V.Caller.CompanyCode, V.Local.sSAPCode, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sOrgCode)
			V.Local.sOrgCode.Set("TEC_MASTER")
			
			F.Intrinsic.Control.For(V.Local.iCnt,0, V.Local.sSelectedRows.UBound,1)
				'set the row that corresponds to the selected value
				V.Local.iRow.Set(V.Local.sSelectedRows(V.Local.iCnt).Long)
				'use the row number to get the VENODR data the user wants to screen
				V.Local.sVendor.Set(V.DataTable.dtVendor(V.Local.iRow).VENDOR!FieldValTrim)
				V.Local.sAddressType.Set(V.DataTable.dtVendor(V.Local.iRow).VEND_TYPE!FieldValTrim)
				'check to see which ship to value they are screening
				F.Intrinsic.Control.If(V.Local.sAddressType.Trim,=,"Buy From")
					'if they have selected a value with no ship to ID, it means they want to send the Bill To address to TA for rescreening
					V.Local.sPartnerID.Set(V.Local.sVendor.Trim)
					F.Intrinsic.String.LPad(V.Local.sVendor," ",10, V.Local.sVendor)
					F.Intrinsic.String.Build("{0}_1_V", V.Local.sVendor, V.Local.sVendor)
					'we need to query VENODR master to get the address information
					F.Intrinsic.String.Build("SELECT A.NAME_VENDOR, A.ADDRESS1, A.ADDRESS2, B.ADDRESS3, B.ADDRESS4, B.ADDRESS5, A.CITY, A.STATE, A.CODE_ZIP, A.COUNTRY FROM V_VENDOR_MASTER A LEFT JOIN V_VENDOR_INTL B ON A.VENDOR = B.VENDOR  WHERE A.VENDOR = '{0}'", V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
					F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
						F.Intrinsic.String.Split(V.Local.sRet2, "*!*", V.Local.sRet2)
						V.Local.sB2Name.Set(V.Local.sRet2(0).Trim)
						V.Local.sB2Addr1.Set(V.Local.sRet2(1).Trim)
						V.Local.sB2Addr2.Set(V.Local.sRet2(2).Trim)
						V.Local.sB2Addr3.Set(V.Local.sRet2(3).Trim)
						V.Local.sB2Addr4.Set(V.Local.sRet2(4).Trim)
						V.Local.sB2Addr5.Set(V.Local.sRet2(5).Trim)
						V.Local.sB2City.Set(V.Local.sRet2(6).Trim)
						V.Local.sB2State.Set(V.Local.sRet2(7).Trim)
						V.Local.sB2Zip.Set(V.Local.sRet2(8).Trim)
						V.Local.sB2Country.Set(V.Local.sRet2(9).Trim)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.sB2Addr5.Trim,<>,"")
						F.Intrinsic.String.Build("{0} {1}", V.Local.sB2Addr4.Trim, V.Local.sB2Addr5.Trim, V.Local.sB2Addr4)
					F.Intrinsic.Control.EndIf
					
					'loop through dtXML to set the corresponding data needed
					'columns for dtXML
					'ACTION, COMPANY_CODE, ORG_CODE, PRIORITY, MESSAGE_TYPE, USERID, RECEIVER, SENDER, BATCH_ID
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
						'need to update sender and batch id
						F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
					F.Intrinsic.Control.Next(V.Local.iCnt3)
			
					'loop through dtXML$BusKey to set the corresponding data needed
					'columns for dtXML$BusKey
					'PTNR_ID, ORG_CODE
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Bus_Key.RowCount--,1)
						'need to update the partner id
						F.Data.DataTable.SetValue("envelope$Bus_Key", V.Local.iCnt3, "PTNR_ID", V.Local.sVendor, "ORG_CODE", v.Local.sOrgCode.Trim)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					'loop through dtXML$Partner to set the corresponding data needed
					'columns for dtXML$Partner
					'ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY_CODE, END_USER_DESIGNATION, NAME, ORG_CODE, POSTAL_CODE, PTNR_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_PARTNER_ID, WWIC, IBC, EPCI_FLAG
					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
					'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
						F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "ADDRESS_LINE1", V.Local.sB2Addr1.Trim, "ADDRESS_LINE2", V.Local.sB2Addr2.Trim, "ADDRESS_LINE3", V.Local.sB2Addr3.Trim,"ADDRESS_LINE4", V.Local.sB2Addr4.Trim, "CITY", V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sB2Country.Trim, "NAME", V.Local.sB2Name.Trim,"POSTAL_CODE", V.Local.sB2Zip.Trim, "PTNR_ID", V.Local.sVendor,"SOURCE_SYSTEM", V.Local.sSender.Trim,  "SOURCE_SYSTEM_PARTNER_ID",V.Local.sVendor, "STATE_CODE", "", "ORG_CODE", V.Local.sOrgCode.Trim)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
					
					'build date time
					V.Local.dDate.Set(V.Ambient.Date)
					F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
					F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
					F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)
					
					'query custom partner table to see if a record exists. If it does, update it. If it doesnt, insert a record
					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'V'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
					F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
					
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
							
						F.Intrinsic.String.Build("UPDATE GCG_6625_PARTNER SET DECISION = 'X', DATE_TIME = '{0}' WHERE CO_CODE = '{1}' AND PARTNER_ID = '{2}' AND PARTNER_TYPE = 'V'", V.Local.sDateTime, V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.ElseIf(V.Local.sRet4.Trim,=,"")
						' save to XML and then update the record in the custom table
						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
		
						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
						'add record to custom partner table
						F.Intrinsic.String.Build("INSERT INTO GCG_6625_PARTNER (CO_CODE, PARTNER_ID, PARTNER_TYPE, DECISION, CRIMEA_HOLD, DATE_TIME) VALUES ('{0}', '{1}', 'V','X', 0,'{2}')", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sDateTime, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
					
'				F.Intrinsic.Control.ElseIf(V.Local.sShipToID.Trim,=,"Pay To")
'					'if they have selected a value with 000000 as the ship to ID, it means they want to send the main Ship To address to TA for rescreening
'					F.Intrinsic.String.Build("{0}_000000", V.Local.sCustomer.Trim, V.Local.sPartnerID)
'					F.Intrinsic.String.Build("{0}_QB{1}_000000", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sCust)
'					'we need to query customer master to get the address information
'					F.Intrinsic.String.Build("SELECT A.NAME_CUSTOMER_SHIP, A.ADDRESS1_SHIP, A.ADDRESS2_SHIP, B.ADDRESS3_SHIP, B.ADDRESS4_SHIP, B.ADDRESS5_SHIP, A.CITY_SHIP, A.STATE_SHIP, A.CODE_ZIP_SHIP, A.COUNTRY_SHIP, C.CODE_SIC FROM V_CUSTOMER_SHIPTO A LEFT JOIN V_CUSTOMER_INTL B ON A.CUSTOMER = B.CUSTOMER LEFT JOIN V_CUSTOMER_SALES C ON A.CUSTOMER = C.CUSTOMER WHERE A.CUSTOMER = '{0}'", V.Local.sCustomer.Trim, V.Local.sSQL)
'					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
'					F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
'						F.Intrinsic.String.Split(V.Local.sRet2, "*!*", V.Local.sRet2)
'						V.Local.sS2Name.Set(V.Local.sRet2(0).Trim)
'						V.Local.sS2Addr1.Set(V.Local.sRet2(1).Trim)
'						V.Local.sS2Addr2.Set(V.Local.sRet2(2).Trim)
'						V.Local.sS2Addr3.Set(V.Local.sRet2(3).Trim)
'						V.Local.sS2Addr4.Set(V.Local.sRet2(4).Trim)
'						V.Local.sS2Addr5.Set(V.Local.sRet2(5).Trim)
'						V.Local.sS2City.Set(V.Local.sRet2(6).Trim)
'						V.Local.sS2State.Set(V.Local.sRet2(7).Trim)
'						V.Local.sS2Zip.Set(V.Local.sRet2(8).Trim)
'						V.Local.sS2Country.Set(V.Local.sRet2(9).Trim)
'						V.Local.sSICCode.Set(V.Local.sRet2(10).Trim)
'					F.Intrinsic.Control.EndIf
'					
'					'pull the end user designation from the header if no record is found
'					F.Intrinsic.String.Build("SELECT END_USER_DESIG FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
'					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sEndUserDesig)
'					F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,<>,"")
'						F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
'							V.Local.sEndUserDesigTemp.Set("MILITARY")
'						F.Intrinsic.Control.Else
'							V.Local.sEndUserDesigTemp.Set("CIVIL")
'						F.Intrinsic.Control.EndIf
'					F.Intrinsic.Control.Else
'						F.Intrinsic.UI.Msgbox("You must select an End User Designation before you can continue!", "Required Field")
'						'show custom browser that allows the user to select an end user designation
'						F.Intrinsic.UI.BrowserFromString("Select an End User Designation","CIVIL*!*OIL & GAS*!*MILITARY", "@!@", "*!*", "End User Designation", "500",V.Local.sRet3)
'						F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"***CANCEL***")
'							V.Local.sEndUserDesig.Set(V.Local.sRet3.Trim)
'							F.Intrinsic.Control.If(V.Local.sEndUserDesig.Trim,=, "MILITARY")
'								V.Local.sEndUserDesigTemp.Set("MILITARY")
'							F.Intrinsic.Control.Else
'								V.Local.sEndUserDesigTemp.Set("CIVIL")
'							F.Intrinsic.Control.EndIf
'						F.Intrinsic.Control.EndIf
'					F.Intrinsic.Control.EndIf
'					
'					'loop through dtXML to set the corresponding data needed
'					'columns for dtXML
'					'ACTION, COMPANY_CODE, ORG_CODE, PRIORITY, MESSAGE_TYPE, USERID, RECEIVER, SENDER, BATCH_ID
'					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
'						'need to update sender and batch id
'						F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
'					F.Intrinsic.Control.Next(V.Local.iCnt3)
'			
'					'loop through dtXML$BusKey to set the corresponding data needed
'					'columns for dtXML$BusKey
'					'PTNR_ID, ORG_CODE
'					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Bus_Key.RowCount--,1)
'						'need to update the partner id
'						F.Data.DataTable.SetValue("envelope$Bus_Key", V.Local.iCnt3, "PTNR_ID", V.Local.sCust.Trim, "ORG_CODE", v.Local.sOrgCode.Trim)
'					F.Intrinsic.Control.Next(V.Local.iCnt3)
'					
'					'loop through dtXML$Partner to set the corresponding data needed
'					'columns for dtXML$Partner
'					'ADDRESS_LINE1, ADDRESS_LINE2, CITY, COUNTRY_CODE, END_USER_DESIGNATION, NAME, ORG_CODE, POSTAL_CODE, PTNR_ID, SOURCE_SYSTEM, SOURCE_SYSTEM_PARTNER_ID, WWIC, IBC, EPCI_FLAG
'					F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$Partner.RowCount--,1)
'						'need to update the address line 1, address line 2, city, country code, name, postal code, partner id, sender, partner id, system partner id WWIC = SIC code stored in GSS, IBC
'						F.Data.DataTable.SetValue("envelope$Partner", V.Local.iCnt3, "ORG_CODE", v.Local.sOrgCode.Trim,"ADDRESS_LINE1", V.Local.sS2Addr1.Trim, "ADDRESS_LINE2", V.Local.sS2Addr2.Trim, "CITY", V.Local.sS2City.Trim, "COUNTRY_CODE", V.Local.sS2Country.Trim, "NAME", V.Local.sS2Name.Trim, "END_USER_DESIGNATION", V.Local.sEndUserDesigTemp.Trim,"POSTAL_CODE", V.Local.sS2Zip.Trim, "PTNR_ID", V.Local.sCust.Trim,"SOURCE_SYSTEM", V.Local.sSender.Trim,  "SOURCE_SYSTEM_PARTNER_ID", V.Local.sCust.Trim, "WWIC", V.Local.sSICCode.Trim, "IBC", "")
'					F.Intrinsic.Control.Next(V.Local.iCnt3)
'					
'					'build date time
'					V.Local.dDate.Set(V.Ambient.Date)
'					F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
'					F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
'					F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)
'					
'					'query custom partner table to see if a record exists. If it does, update it. If it doesnt, insert a record
'					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PARTNER WHERE CO_CODE = '{0}' AND PARTNER_ID = '{1}' AND PARTNER_TYPE = 'C'", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
'					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
'					F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
'					
'						' save to XML and then update the record in the custom table
'						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
'		
'						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
'							
'						F.Intrinsic.String.Build("UPDATE GCG_6625_PARTNER SET DECISION = 'X', DATE_TIME = '{0}', END_USER_DESIG = '{1}' WHERE CO_CODE = '{2}' AND PARTNER_ID = '{3}' AND PARTNER_TYPE = 'C'", V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sSQL)
'						F.ODBC.Connection!con.Execute(V.Local.sSQL)
'					F.Intrinsic.Control.ElseIf(V.Local.sRet4.Trim,=,"")
'						' save to XML and then update the record in the custom table
'						F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
'		
'						F.Data.DataTable.SaveDataSetToXML("envelope", 1, V.Local.sFQP)
'						'add record to custom partner table
'						F.Intrinsic.String.Build("INSERT INTO GCG_6625_PARTNER (CO_CODE, PARTNER_ID, PARTNER_TYPE, DECISION, CRIMEA_HOLD, DATE_TIME, END_USER_DESIG) VALUES ('{0}', '{1}', 'C','X', 0,'{2}', '{3}')", V.Caller.CompanyCode, V.Local.sPartnerID.Trim, V.Local.sDateTime, V.Local.sEndUserDesig.Trim, V.Local.sSQL)
'						F.ODBC.Connection!con.Execute(V.Local.sSQL)
'					F.Intrinsic.Control.EndIf	
				F.Intrinsic.Control.EndIf
				
				'build date time
				V.Local.dDate.Set(V.Ambient.Date)
				F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)
				F.Intrinsic.String.Format(V.Ambient.Time,"Hh:Nn:Ss.000", V.Local.sTime)
				F.Intrinsic.String.Build("{0} {1}", v.Local.sDate.Trim, V.Local.sTime.Trim, V.Local.sDateTime)

				'Callsub to get the HTTP settings
				F.Intrinsic.Control.CallSub(HTTPSettings)
				'callsub to process the XML
				F.Intrinsic.Control.CallSub(ProcessXML)
				
				F.Data.DataTable.SetValue("dtVendor", V.Local.iRow, "TCS_STATUS","Awaiting TCS Status")
				F.Data.DataTable.SetValue("dtVendor", V.Local.iRow, "SEL",0)
				
				f.Intrinsic.UI.Sleep(1)
			F.Intrinsic.Control.Next(V.Local.iCnt)
		F.Intrinsic.Control.Else
			'if no SAP Code found, don't allow them to continue
			F.Intrinsic.UI.Msgbox("The SAP Code has not been set up for this Company Code. You need to setup the associated SAP Code via System Support > Administration > TCS Maintenance (6625)", "Required Data")
			F.Intrinsic.Control.ExitSub
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickUpdateVendor.End

Program.Sub.MenuClickSelectVendors.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtVendor.RowCount--,>,-1)
	'set the SEL value to 1 for all records
	F.Data.DataTable.SetValue("dtVendor",-1, "SEL", 1)
	F.Data.DataTable.AcceptChanges("dtVendor")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickSelectVendors.End

Program.Sub.MenuClickDeselectVendors.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtVendor.RowCount--,>,-1)
	'set the SEL value to 0 for all records
	F.Data.DataTable.SetValue("dtVendor",-1, "SEL", 0)
	F.Data.DataTable.AcceptChanges("dtVendor")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickDeselectVendors.End

Program.Sub.MenuClickRefreshOrders.Start
F.Intrinsic.Control.Try
V.Local.bAwaitingStatus.Declare(Boolean)
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iApprovalFlag.Declare(Long)
V.Local.sPartnerID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sShipTo.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sVendor.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sStatus2.Declare(String)

F.Intrinsic.UI.InvokeWaitDialog("Refreshing Order Grid...", "Please Wait")

Gui.f_Main.cmdSearch.Enabled(False)

'check to see if there is a value in the order no textbox. If there is, load that specific order. If there isn't ,load all orders

F.Intrinsic.Control.If(V.Screen.f_Main!txtOrderSrch.Text,=,"")
	'load order grid
	F.Intrinsic.Control.If(V.DataTable.dtOrders.Exists)
		F.Data.DataTable.Close("dtOrders")
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.dtOrders$dtOrderLines.Exists)
		F.Data.DataTable.Close("dtOrders$dtOrderLines")
	F.Intrinsic.Control.EndIf

	F.Data.DataTable.CreateFromSQL("dtOrders", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER ORDER BY ORDER_NO", True)
	F.Data.DataTable.AddTable("dtOrders", "dtOrderLines")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "ORDER_NO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "RECORD_NO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "SHIP_TO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PART", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "LOC", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "QTY_ORDERED", "FLOAT")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PRICE", "FLOAT")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "TCS_STATUS", "STRING")
	
F.Intrinsic.Control.Else
	'load order grid
	F.Intrinsic.Control.If(V.DataTable.dtOrders.Exists)
		F.Data.DataTable.Close("dtOrders")
	F.Intrinsic.Control.EndIf

	F.Intrinsic.Control.If(V.DataTable.dtOrders$dtOrderLines.Exists)
		F.Data.DataTable.Close("dtOrders$dtOrderLines")
	F.Intrinsic.Control.EndIf
	V.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
	F.Intrinsic.String.LPad(V.Local.sOrderNo, "0", 7, V.Local.sOrderNo)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, ORDER_NO, CUSTOMER, '' AS TCS_STATUS  FROM V_ORDER_HEADER WHERE ORDER_NO = '{0}' ORDER BY ORDER_NO", V.Local.sOrderNo.Trim, V.Local.sSQL)
	
	F.Data.DataTable.CreateFromSQL("dtOrders", "con",v.Local.sSQL, True)
	F.Data.DataTable.AddTable("dtOrders", "dtOrderLines")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "SEL", "BOOLEAN")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "ORDER_NO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "RECORD_NO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "SHIP_TO", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PART", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "LOC", "STRING")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "QTY_ORDERED", "FLOAT")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "PRICE", "FLOAT")
	F.Data.DataTable.AddColumn("dtOrders$dtOrderLines", "TCS_STATUS", "STRING")

F.Intrinsic.Control.EndIf

'loop through the order header table - use the order number to get the order lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtOrders.RowCount--,1)
	V.Local.sOrderNo.Set(V.DataTable.dtOrders(V.Local.iCnt).ORDER_NO!FieldValTrim)
	F.Intrinsic.String.Build("SELECT ORDER_NO, RECORD_NO, SHIP_ID,  PART, LOCATION, QTY_ORDERED, PRICE, '' AS TCS_STATUS FROM V_ORDER_LINES WHERE ORDER_NO = '{0}' AND LINE_TYPE <> 'F'", V.Local.sOrderNo.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each order line 
			'build query to pull status for order line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND POSNR = '{1}'  ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
				F.Data.DataTable.Close("dtOrdStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtOrdStatus","dvDPL")
					F.Data.DataView.Close("dtOrdStatus","dvLIC")
					F.Data.DataView.Close("dtOrdStatus","dvData")
					F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
				F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
					V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
				F.Intrinsic.Control.Else
					V.Local.iApprovalFlag.Set(0)
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
					V.Local.sStatus.Set("Unscreened Order Line")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtOrdStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtOrders$dtOrderLines", "ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "SHIP_TO", V.DataTable.dtTemp(V.Local.iCnt2).SHIP_ID!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf
	
	'check to see if the order header has been approved. if it hasn't set the status as that
	F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP where ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", v.Local.sOrderNo.Trim, V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
	F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
		V.Local.iApprovalFlag.Set(V.Local.sRet.Long)
	F.Intrinsic.Control.Else
		V.Local.iApprovalFlag.Set(0)
	F.Intrinsic.Control.EndIf
				
	F.Intrinsic.Control.If(V.Local.iApprovalFlag,=,0)
		V.Local.sStatus.Set("Order Not Approved")
	F.Intrinsic.Control.ElseIf(V.Local.iApprovalFlag,=,1)
		'build query to pull TCS Status
		F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'O' AND PARTID <> '' ", V.Local.sOrderNo.Trim, V.Local.sSQL)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.Exists)
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.EndIf
		F.Data.DataTable.CreateFromSQL("dtOrdStatus", "con", V.Local.sSQL, True)
		F.Intrinsic.Control.If(V.DataTable.dtOrdStatus.RowCount--,>,-1)
			F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
			F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
		
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus.Set("DPL Fail Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("LIC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Data Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("EUC Fail Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtOrdStatus","dvDPL")
			F.Data.DataView.Close("dtOrdStatus","dvLIC")
			F.Data.DataView.Close("dtOrdStatus","dvData")
			F.Data.DataView.Close("dtOrdStatus","dvEUC")
			
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				F.Data.DataView.Create("dtOrdStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
				F.Data.DataView.Create("dtOrdStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtOrdStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
						F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
				F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
					'check approval status
					F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
					F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
						F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
							V.Local.sStatus.Set("Order Not Approved")
						F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
							V.Local.sStatus.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
						V.Local.sStatus.Set("Order Not Approved")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
						V.Local.sStatus.Set("TA Pass")
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Line(s) have failed TA Screen")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Data.DataView.Close("dtOrdStatus","dvDPL")
				F.Data.DataView.Close("dtOrdStatus","dvLIC")
				F.Data.DataView.Close("dtOrdStatus","dvData")
				F.Data.DataView.Close("dtOrdStatus","dvEUC")
				
			f.Intrinsic.Control.Else
				V.Local.sStatus.Set("Line(s) have failed TA Screen")
			F.Intrinsic.Control.EndIf
	
			F.Data.DataTable.Close("dtOrdStatus")
		F.Intrinsic.Control.Else
			'check approval status
			F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
					V.Local.sStatus.Set("Order Not Approved")
				F.Intrinsic.Control.ElseIf(V.Local.sRet.Long,=,1)
					V.Local.sStatus.Set("Unscreened Order")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
				V.Local.sStatus.Set("Unscreened Order")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf	
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.SetValue("dtOrders", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)

Gui.f_Main.txtOrderSrch.Text("")
'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status

'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatOrderGrid)

F.Intrinsic.UI.CloseWaitDialog

Gui.f_Main.cmdSearch.Enabled(True)
F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickRefreshOrders.End

Program.Sub.MenuClickUpdateOrders.Start
F.Intrinsic.Control.Try
V.Local.bBillToMatch.Declare(Boolean, False)
V.Local.bShipToMatch.Declare(Boolean, False)
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iCnt3.Declare(Long)
V.Local.iRow.Declare(Long)
V.Local.sSelectedRows.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sRet2.Declare(String)
V.Local.sSAPCode.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTempFQP.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sCurrency.Declare(String)
V.Local.sCountry.Declare(String)
V.Local.sCustPO.Declare(String)
V.Local.sResolutionPrtnrID.Declare(String)
V.Local.sShipToPartnerID.Declare(String)
V.Local.sB2Address1.Declare(String)
V.Local.sB2Address2.Declare(String)
V.Local.sB2Address3.Declare(String)
V.Local.sB2Address4.Declare(String)
V.Local.sB2Address5.Declare(String)
V.Local.sB2City.Declare(String)
V.Local.sB2State.Declare(String)
V.Local.sB2ZipCode.Declare(String)
V.Local.sB2Country.Declare(String)
V.Local.sB2Name.Declare(String)
V.Local.sS2Address1.Declare(String)
V.Local.sS2Address2.Declare(String)
V.Local.sS2Address3.Declare(String)
V.Local.sS2Address4.Declare(String)
V.Local.sS2Address5.Declare(String)
V.Local.sS2City.Declare(String)
V.Local.sS2State.Declare(String)
V.Local.sS2Zip.Declare(String)
V.Local.sS2Country.Declare(String)
V.Local.sS2Name.Declare(String)
V.Local.sBillToPartnerID.Declare(String)
V.Local.sRecordNo.Declare(String)
V.Local.sUM.Declare(String)
V.Local.sLineCurrency.Declare(String)
V.Local.fPrice.Declare(Float)
V.Local.fStdCost.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.sPart.Declare(String)
V.Local.sRev.Declare(String)
V.Local.sTCPN.Declare(String)
V.Local.sLineResPrtnrID.Declare(String)
V.Local.sCustomer.Declare(String)
V.Local.sRet3.Declare(String)
V.Local.sLineShipID.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sShipToID.Declare(String)
V.Local.sShipToRefResolution.Declare(String)
V.Local.sBillToRefResolution.Declare(String)
V.Local.sSoldToRefResol.Declare(String)
V.Local.sPayerRefResol.Declare(String)
V.Local.sLineDescription.Declare(String)
V.Local.sPartDescription.Declare(String)
V.Local.bDescriptionsMatch.Declare(Boolean)
V.Local.sFQP.Declare(String)
V.Local.sOrgCode.Declare(String)
V.Local.sRet4.Declare(String)
V.Local.sSalesOrg.Declare(String)
V.Local.sPlant.Declare(String)
V.Local.sRet5.Declare(String)
V.Local.bMatch.Declare(String)
V.Local.sPartnerID.Declare(String)
V.Local.sFullB2Address.Declare(String)
V.Local.sFullS2Address.Declare(String)
V.Local.sExportLocation.Declare(String)
V.Local.sFromLocation.Declare(String)
V.Local.sLineRefPartnerID.Declare(String)
V.Local.sCustB2Address1.Declare(String)
V.Local.sCustB2Address2.Declare(String)
V.Local.sCustB2Address3.Declare(String)
V.Local.sCustB2Address4.Declare(String)
V.Local.sCustB2Address5.Declare(String)
V.Local.sCustB2City.Declare(String)
V.Local.sCustB2State.Declare(String)
V.Local.sCustB2ZipCode.Declare(String)
V.Local.sCustB2Country.Declare(String)
V.Local.sCustB2Name.Declare(String)
V.Local.sCustFullB2Address.Declare(String)
V.Local.sCustS2Address1.Declare(String)
V.Local.sCustS2Address2.Declare(String)
V.Local.sCustS2Address3.Declare(String)
V.Local.sCustS2Address4.Declare(String)
V.Local.sCustS2Address5.Declare(String)
V.Local.sCustS2City.Declare(String)
V.Local.sCustS2State.Declare(String)
V.Local.sCustS2Zip.Declare(String)
V.Local.sCustS2Country.Declare(String)
V.Local.sCustS2Name.Declare(String)
V.Local.sCustFullS2Address.Declare(String)
V.Local.sTempShipID.Declare(String)
V.Local.sTempOrder.Declare(String)
V.Local.sMessage.Declare(String)

V.Global.sSubmitType.Set("ORDER")
'set the sender value
F.Intrinsic.String.Build("GSS_{0}", V.Caller.CompanyCode, V.Local.sSender)

'build file path for sample datapacket
F.Intrinsic.String.Build("{0}\tempOrder.xml", V.Caller.FilesDir, V.Local.sTempFQP)

'query custom cocode maint to get the SAP code for the company code
F.Intrinsic.String.Build("SELECT SAP_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}'", V.Caller.CompanyCode, V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
	V.Local.sSAPCode.Set(V.Local.sRet.Trim)
	'query ccode maint to get org code
	F.Intrinsic.String.Build("SELECT ORG_CODE, SALES_ORG, TEC_PLANT FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}' AND SAP_CODE = '{1}'", V.Caller.CompanyCode, V.Local.sSAPCode.Trim, V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
	F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
		F.Intrinsic.String.Split(V.Local.sRet4,"*!*",V.Local.sRet4)
		v.Local.sOrgCode.Set(V.Local.sRet4(0).Trim)
		V.Local.sSalesOrg.Set(V.Local.sRet4(1).Trim)
		V.Local.sPlant.Set(V.Local.sRet4(2).Trim)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.AcceptChanges("dtOrders")
	
	F.Intrinsic.UI.InvokeWaitDialog("Building XML...", "Please Wait")
	'get the orders the user has selected

	
	 F.Data.DataTable.Select("dtOrders", "[SEL] = 1", V.Local.sSelectedRows)
	 'check to make sure the user has selected rows
	 F.Intrinsic.Control.If(V.Local.sSelectedRows.Trim,<>,"***NORETURN***")
	 	'split the rows
	 	F.Intrinsic.String.Split(V.Local.sSelectedRows, "*!*", V.Local.sSelectedRows)
	 	'loop through the selected rows and get the information to build the order XML
	 	F.Intrinsic.Control.For(V.Local.iCnt, 0, V.Local.sSelectedRows.UBound,1)
	 
		'Check to see if the datatable already exists. If it does, close it
		F.Intrinsic.Control.If(V.DataTable.envelope.Exists)
			F.Data.DataTable.Close("envelope")
		F.Intrinsic.Control.EndIf
		
		'load sample packet into datatbale
		F.Data.DataTable.CreateDatasetFromXML("envelope", V.Local.sTempFQP, True)
	
	 		V.Local.iRow.Set(V.Local.sSelectedRows(V.Local.iCnt).Long)
	 		V.Local.sOrderNo.Set(V.DataTable.dtOrders(V.Local.iRow).ORDER_NO!FieldValTrim)
	 		F.Intrinsic.String.LPad(V.Local.sOrderNo, "0", 7, V.Local.sOrderNo)
	 		F.Intrinsic.String.Build("QB{0}", V.Local.sOrderNo.Trim, V.Local.sTempOrder)
	 		
	 		'check to see if the order has been approved. If it hasn't been, exit sub
	 		'check approval status
			F.Intrinsic.String.Build("SELECT TOP 1 APPROVAL_FLAG FROM GCG_6093_SO_LINE_APP WHERE ORDER_NO = '{0}' ORDER BY ORDER_LINE DESC", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
				F.Intrinsic.Control.If(V.Local.sRet.Long,=,0)
					F.Intrinsic.UI.Msgbox("Order Not Approved. Information will not be sent to Trade Automation for screening.", "Unapproved Order")
					F.Intrinsic.Control.ExitSub
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
				F.Intrinsic.UI.Msgbox("Order Not Approved. Information will not be sent to Trade Automation for screening.", "Unapproved Order")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
	 		
	 		'use the order number to get the customer information and ship to information
	 		F.Intrinsic.String.Build("SELECT A.CUSTOMER, A.SHIP_ID, A.ORDER_CURRENCY, B.NAME_CUSTOMER, B.ADDRESS_1, B.ADDRESS_2, B.ADDRESS_3, B.ADDRESS_4, B.ADDRESS_5, B.CITY, B.STATE, B.ZIP_CODE, B.COUNTRY, C.NAME_CUSTOMER_SHIP, C.ADDRESS_1_SHIP, C.ADDRESS_2_SHIP, C.ADDRESS_3_SHIP, C.ADDRESS_4_SHIP, C.ADDRESS_5_SHIP, C.CITY_SHIP, C.STATE_SHIP, C.CODE_ZIP_SHIP, C.COUNTRY_SHIP, A.ORDER_LOCATION FROM V_ORDER_HEADER A LEFT JOIN V_ORDER_BILL_TO B ON A.ORDER_NO = B.ORDER_NO AND A.CUSTOMER = B.CUSTOMER LEFT JOIN V_ORDER_SHIP_TO C ON A.ORDER_NO = C.ORDER_NO AND A.CUSTOMER = C.CUSTOMER AND A.SHIP_ID = C.SHIP_ID WHERE A.ORDER_NO = '{0}' ORDER BY A.ORDER_NO", v.Local.sOrderNo.Trim, V.Local.sSQL)
			 F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
			 F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
	 			F.Intrinsic.String.Split(V.Local.sRet, "*!*", V.Local.sRet)
	 			V.Local.sCustomer.Set(V.Local.sRet(0).Trim)
	 			V.Local.sShipToID.Set(V.Local.sRet(1).Trim)
	 			V.Local.sCurrency.Set(V.Local.sRet(2).Trim)
	 			'set the bill to variables
	 			V.Local.sB2Name.Set(V.Local.sRet(3).Trim)
	 			V.Local.sB2Address1.Set(V.Local.sRet(4).Trim)
	 			V.Local.sB2Address2.Set(V.Local.sRet(5).Trim)
	 			V.Local.sB2Address3.Set(V.Local.sRet(6).Trim)
	 			V.Local.sB2Address4.Set(V.Local.sRet(7).Trim)
	 			V.Local.sB2Address5.Set(V.Local.sRet(8).Trim)
	 			V.Local.sB2City.Set(V.Local.sRet(9).Trim)
	 			V.Local.sB2State.Set(V.Local.sRet(10).Trim)
	 			V.Local.sB2ZipCode.Set(V.Local.sRet(11).Trim)
	 			V.Local.sB2Country.Set(V.Local.sRet(12).Trim)
	 			
	 			 'Check to see if the address 5 has any information in it. If it does, combine it with address 4 information
				 F.Intrinsic.Control.If(V.Local.sB2Address5.Trim,<>,"")
	 				F.Intrinsic.String.Build("{0} {1}", V.Local.sB2Address4.Trim, V.Local.sB2Address5.Trim, V.Local.sB2Address4)
				 F.Intrinsic.Control.EndIf
	 			
	 			'set the ship to variables 
	 			V.Local.sS2Name.Set(V.Local.sRet(13).Trim)
	 			V.Local.sS2Address1.Set(V.Local.sRet(14).Trim)
	 			V.Local.sS2Address2.Set(V.Local.sRet(15).Trim)
	 			V.Local.sS2Address3.Set(V.Local.sRet(16).Trim)
	 			V.Local.sS2Address4.Set(V.Local.sRet(17).Trim)
	 			V.Local.sS2Address5.Set(V.Local.sRet(18).Trim)
	 			V.Local.sS2City.Set(V.Local.sRet(19).Trim)
	 			V.Local.sS2State.Set(V.Local.sRet(20).Trim)
	 			V.Local.sS2Zip.Set(V.Local.sRet(21).Trim)
	 			V.Local.sS2Country.Set(V.Local.sRet(22).Trim)
	 			
	 			  'Check to see if the address 5 has any information in it. If it does, combine it with address 4 information
				 F.Intrinsic.Control.If(V.Local.sS2Address5.Trim,<>,"")
	 				F.Intrinsic.String.Build("{0} {1}", V.Local.sS2Address4.Trim, V.Local.sS2Address5.Trim, V.Local.sS2Address4)
				 F.Intrinsic.Control.EndIf
	 			
	 			V.Local.sTempShipID.Set(V.Local.sRet(1).Trim)
	 			
	 			V.Local.sFromLocation.Set(V.Local.sRet(23).Trim)
				F.Intrinsic.String.Build("SELECT COUNTRY FROM V_LOCATION_ADDRESS WHERE LOCN = '{0}'", V.Local.sFromLocation.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sExportLocation)
				F.Intrinsic.Control.If(V.Local.sExportLocation.Trim,=,"")
					V.Local.sExportLocation.Set("US")
				F.Intrinsic.Control.EndIf
	 		F.Intrinsic.Control.EndIf
	 		
	 		F.Intrinsic.Control.If(V.Local.sShipToID.Trim,=,"")
	 			V.Local.sShipToID.Set("000000")
	 		F.Intrinsic.Control.EndIf
	 		
	 		 'build bill to partner ID
			 F.Intrinsic.String.Build("{0}_QB{1}", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sBillToPartnerID)
			 'build ship to partner ID
			 F.Intrinsic.String.Build("{0}_QB{1}_{2}", V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim, V.Local.sShipToID.Trim, V.Local.sShipToPartnerID)
			 
			 'ref resolution partner = PTNR_ID:Country of export-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER
			F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sExportLocation.Trim, V.Local.sResolutionPrtnrID)
			
			'build ship to address ID - Customer name, ship to id (000 if it's the original ship to)
			F.Intrinsic.String.Build("PTNR_ID:{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SHIP_TO", V.Local.sShipToPartnerID, V.Local.sShipToRefResolution)
			
			'build bill to address ID - Customer name
			F.Intrinsic.String.Build("PTNR_ID:{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SOLD_TO", V.Local.sBillToPartnerID, V.Local.sSoldToRefResol)
			
			'build bill to address ID - Customer name
			F.Intrinsic.String.Build("PTNR_ID:{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:BILL_TO", V.Local.sBillToPartnerID, V.Local.sBillToRefResolution)
			
			'build bill to address ID - Customer name
			F.Intrinsic.String.Build("PTNR_ID:{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:PAYER", V.Local.sBillToPartnerID, V.Local.sPayerRefResol)
			
			F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt2, "ACTION", "PARTIAL_UPDATE", "ORG_CODE", "TEC_MASTER", "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
			F.Intrinsic.Control.Next(V.Local.iCnt2)
			
			F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.envelope$BUS_KEY.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$BUS_KEY", V.Local.iCnt2,"ORG_CODE", "TEC_MASTER", "TX_ID", V.Local.sTempOrder.Trim)
			F.Intrinsic.Control.Next(V.Local.iCnt2)
			
			F.Intrinsic.Control.For(V.Local.iCnt2,0, V.DataTable.envelope$TRANSACTION_HEADER.RowCount--,1)
				'update to set ctry_of_export to the country for location table for KT
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER", V.Local.iCnt2, "CURRENCY_CODE", V.Local.sCurrency.Trim, "SOURCE_SYSTEM", V.Local.sSender.Trim, "SOURCE_TX_ID", V.Local.sTempOrder.Trim, "CTRY_OF_EXPORT", V.Local.sExportLocation.Trim, "TX_ID", V.Local.sTempOrder.Trim, "TX_STATE", "OPEN", "ORG_CODE", "TEC_MASTER")
			F.Intrinsic.Control.Next(V.Local.iCnt2)
			
			F.Intrinsic.Control.For(V.Local.iCnt2,0, V.DataTable.envelope$MDI_TX_IMPL_TX_DEFAULT.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$MDI_TX_IMPL_TX_DEFAULT", V.Local.iCnt2, "TEC_PO_NUM", V.Local.sCustPO.Trim, "TEC_SALES_ORG", V.Local.sSalesOrg.Trim, "TEC_SO_NUMBER", V.Local.sOrderNo.Trim, "TEC_PLANT",V.Local.sPlant.Trim)
			F.Intrinsic.Control.Next(V.Local.iCnt2)
			
			F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 0, "REF_RESOLUTION_PARTNER", V.Local.sResolutionPrtnrID.Trim, "PTNR_TYPE", "")
			'update ship to information
			F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 1, "REF_RESOLUTION_PARTNER", V.Local.sShipToRefResolution.Trim, "ADDRESS_LINE1", V.Local.sS2Address1.Trim,"ADDRESS_LINE2", V.Local.sS2Address2.Trim, "ADDRESS_LINE3", V.Local.sS2Address3.Trim, "ADDRESS_LINE4", V.Local.sS2Address4.Trim,"CITY", V.Local.sS2City.Trim, "COUNTRY_CODE", V.Local.sS2Country.Trim, "NAME", V.Local.sS2Name.Trim, "STATE", V.Local.sS2State.Trim, "POSTAL_CODE", V.Local.sS2Zip.Trim, "PTNR_TYPE", "")
			
			'update bill to records
			F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 2, "REF_RESOLUTION_PARTNER", V.Local.sSoldToRefResol.Trim, "ADDRESS_LINE1", V.Local.sB2Address1.Trim, "ADDRESS_LINE2", V.Local.sB2Address2.Trim,"ADDRESS_LINE3", V.Local.sB2Address3.Trim,"ADDRESS_LINE4", V.Local.sB2Address4.Trim,"CITY", V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sCountry.Trim, "NAME", V.Local.sB2Name.Trim, "STATE", V.Local.sB2State.Trim, "POSTAL_CODE", V.Local.sB2ZipCode, "PTNR_TYPE", "")
		
			F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 3, "REF_RESOLUTION_PARTNER", V.Local.sBillToRefResolution.Trim, "ADDRESS_LINE1", V.Local.sB2Address1.Trim, "ADDRESS_LINE2", V.Local.sB2Address2.Trim,"ADDRESS_LINE3", V.Local.sB2Address3.Trim,"ADDRESS_LINE4", V.Local.sB2Address4.Trim,"CITY", V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sCountry.Trim, "NAME", V.Local.sB2Name.Trim, "STATE", V.Local.sB2State.Trim, "POSTAL_CODE", V.Local.sB2ZipCode, "PTNR_TYPE", "")
		
			F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 4, "REF_RESOLUTION_PARTNER", V.Local.sPayerRefResol.Trim, "ADDRESS_LINE1", V.Local.sB2Address1.Trim,  "ADDRESS_LINE2", V.Local.sB2Address2.Trim,"ADDRESS_LINE3", V.Local.sB2Address3.Trim,"ADDRESS_LINE4", V.Local.sB2Address4.Trim,"CITY", V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sCountry.Trim, "NAME", V.Local.sB2Name.Trim, "STATE", V.Local.sB2State.Trim, "POSTAL_CODE", V.Local.sB2ZipCode, "PTNR_TYPE", "")
			
			'add header record to the ORD_DELIV table
	
			
			'build the string to see if the record exists
			F.Intrinsic.String.Build("SELECT * FROM GCG_6625_ORD_DELIV WHERE TRANS_TYPE = 'O' AND TRANS_ID = '{0}' AND PARTID IS NULL AND (STATUS3 = 'O' OR STATUS3 = 'H')", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet5)
			F.Intrinsic.Control.If(V.Local.sRet5.Trim,<>,"")
				'if it does, update it
				F.Intrinsic.String.Build("UPDATE GCG_6625_ORD_DELIV SET STATUS3 = 'O', PASS_FAIL_DPL = 'X', PASS_FAIL_LIC = 'X', LIC_NUM = '', PASS_FAIL_DATA = 'X', PASS_FAIL_EUC = 'X' WHERE TRANS_TYPE = 'O' AND TRANS_ID = '{0}' AND PARTID IS NULL", V.Local.sOrderNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
			F.Intrinsic.Control.Else
				'if it doesn't, insert it
				F.Intrinsic.String.Build("INSERT INTO GCG_6625_ORD_DELIV (TRANS_ID, TRANS_TYPE, POSNR, STATUS3, PASS_FAIL_DPL, PASS_FAIL_LIC, LIC_NUM, PASS_FAIL_DATA, PASS_FAIL_EUC) VALUES ('{0}', 'O', '', 'O', 'X','X','', 'X','X')", v.Local.sOrderNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.AcceptChanges("envelope")
	 		
	 		
	 		'query order lines for the order number
			F.Intrinsic.String.Build("SELECT RECORD_NO, SHIP_ID, QTY_ORDERED, UM_ORDER, PART, PRICE, ORDER_CURR_CD, LOCATION, DESCRIPTION FROM V_ORDER_LINES WHERE ORDER_NO = '{0}' ORDER BY RECORD_NO", V.Local.sOrderNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
			F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")	
				'loop through order lines to get transaction line information 
				F.Intrinsic.String.Split(V.Local.sRet2.Trim,"#$#", V.Local.sRet2)
				F.Intrinsic.Control.For(V.Local.iCnt3, V.Local.sRet2.LBound, V.Local.sRet2.UBound, 1)
					F.Intrinsic.String.Split(V.Local.sRet2(V.Local.iCnt3), "*!*", V.Local.sRet3)	
					'record no
					V.Local.sRecordNo.Set(V.Local.sRet3(0).Trim)
					'ship id
					V.Local.sLineShipID.Set(V.Local.sRet3(1).Trim)
					'quantity
					V.Local.fQty.Set(V.Local.sRet3(2).Float)
					'UOM from order line
					V.Local.sUM.Set(V.Local.sRet3(3).Trim)
					'part number (TCPN from CPR - no rev)
					V.Local.sPart.Set(V.Local.sRet3(4))
					'unit price
					V.Local.fPrice.Set(V.Local.sRet3(5).Float)
					'Order Line price. If 0, pull total cost from INVENTORY_COST
					
					'Currency from Order line
					V.Local.sCurrency.Set(V.Local.sRet3(6).trim)
					'Location
					V.Local.sLoc.Set(V.Local.sRet3(7))
					'Description
					V.Local.sLineDescription.Set(V.Local.sRet3(8).Trim)
					
					F.Intrinsic.Control.If(V.Local.fPrice,=,0)
						'If 0, pull total cost from INVENTORY_COST
						F.Intrinsic.String.Build("SELECT COST FROM V_INVENTORY_COST WHERE PART = '{0}' AND LOCN = '{1}'", V.Local.sPart, V.Local.sLoc, V.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.fPrice)
						F.Intrinsic.Control.If(V.Local.fPrice,=,0)
							V.Local.fPrice.Set(0.01)
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.Build("SELECT DESCRIPTION FROM V_INVENTORY_MSTR WHERE PART = '{0}' AND LOCATION = '{1}'", V.Local.sPart, V.Local.sLoc.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sPartDescription)
					
					'check to see if the descriptions match
					F.Intrinsic.Control.If(V.Local.sLineDescription.Trim,=,V.Local.sPartDescription.Trim)
						V.Local.bDescriptionsMatch.Set(True) 
						V.Local.sLineDescription.Set("")
					F.Intrinsic.Control.Else
						V.Local.bDescriptionsMatch.Set(False)
					F.Intrinsic.Control.EndIf
		
				'	F.Intrinsic.String.Right(V.Local.sPart, 3, V.Local.sRev)
				'	F.Intrinsic.String.Left(V.Local.sPart, 17, V.Local.sPart)
					F.Intrinsic.String.IsInString(V.Local.sPart, "||", True, V.Local.bMatch)
					F.Intrinsic.Control.If(V.Local.bMatch,=,True)
						'get the display part form inv_lxr
						F.Intrinsic.String.Build("SELECT DISPLAY_PART FROM INV_LXR WHERE GSS_PART = '{0}'", v.Local.sPart, v.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sTCPN)
					F.Intrinsic.Control.ElseIf(V.Local.bMatch,=,False)
						'get the left 17 of the part because the revision isn't needed
						F.Intrinsic.String.Left(V.Local.sPart, 17, V.Local.sTCPN)
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.Local.sTCPN.Trim,<>,"")
						'build ref resolution product (PROD_ID: (tcpn); PROD_ORG_CODE:TEC_MASTER||)
						F.Intrinsic.String.Build("PROD_ID:{0};PROD_ORG_CODE:TEC_MASTER||", V.Local.sTCPN.Trim, V.Local.sLineResPrtnrID)
					F.Intrinsic.Control.EndIf
					
					'check to see if the line ship id matches the header
					F.Intrinsic.Control.If(V.Local.sLineShipID.Trim,<>,V.Local.sTempShipID.Trim)
						'if they don't match, get the ship to address information for the line
						F.Intrinsic.String.Build("SELECT C.NAME_CUSTOMER_SHIP, C.ADDRESS_1_SHIP, C.ADDRESS_2_SHIP, C.ADDRESS_3_SHIP, C.ADDRESS_4_SHIP, C.ADDRESS_5_SHIP, C.CITY_SHIP, C.STATE_SHIP, C.CODE_ZIP_SHIP, C.COUNTRY_SHIP FROM V_ORDER_SHIP_TO C WHERE C.ORDER_NO = '{0}' AND ORDER_SHIP_ID = '{1}' ORDER BY C.ORDER_NO", v.Local.sOrderNo.Trim, V.Local.sLineShipID.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
						F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
							'split the record to build out the ship to information
							F.Intrinsic.String.Split(V.Local.sRet4,"*!*", V.Local.sRet4)
							V.Local.sCustS2Name.Set(V.Local.sRet4(0).Trim)
					 		V.Local.sCustS2Address1.Set(V.Local.sRet4(1).Trim)
					 		V.Local.sCustS2Address2.Set(V.Local.sRet4(2).Trim)
					 		V.Local.sCustS2Address3.Set(V.Local.sRet4(3).Trim)
					 		V.Local.sCustS2Address4.Set(V.Local.sRet4(4).Trim)
					 		V.Local.sCustS2Address5.Set(V.Local.sRet4(5).Trim)
					 		V.Local.sCustS2City.Set(V.Local.sRet4(6).Trim)
					 		V.Local.sCustS2State.Set(V.Local.sRet4(7).Trim)
					 		V.Local.sCustS2Zip.Set(V.Local.sRet4(8).Trim)
					 		V.Local.sCusts2Country.Set(V.Local.sRet4(9).Trim)
					 		
					 		 'Check to see if the address 5 has any information in it. If it does, combine it with address 4 information
							 F.Intrinsic.Control.If(V.Local.sCustS2Address5.Trim,<>,"")
	 							F.Intrinsic.String.Build("{0} {1}", V.Local.sCustS2Address4.Trim, V.Local.sCustS2Address5.Trim, V.Local.sCustS2Address4)
							 F.Intrinsic.Control.EndIf
					 	F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf

					'Check to see if it's the first sales order line	
					F.Intrinsic.Control.If(V.Local.iCnt3,=,0)
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",true)
						'add logic to update the ref_resolution_partner for the transaction line
						F.Data.DataTable.SetValue("envelope$TRANSACTION_LINE", 0, "COMMERCIAL_UOM", V.Local.sUM.Trim, "CURRENCY_CODE", V.Local.sCurrency.Trim, "LINE_ID", V.Local.sRecordNo.Trim, "PRICE_UNIT", V.Local.fPrice, "QUANTITY", V.Local.fQty, "SOURCE_PROD_ID", V.Local.sTCPN.Trim, "REF_RESOLUTION_PRODUCT", V.Local.sLineResPrtnrID, "PROD_DESCRIPTION", V.Local.sLineDescription, "LINE_TYPE", "MAIN", "TRANSACTION_LINE_ID", V.Local.iCnt3,"TRANSACTION_HEADER_ID",0)
						
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE_PARTNER",true)
						
						F.Intrinsic.Control.If(V.Local.sLineShipID.Trim,<>,V.Local.sTempShipID.Trim) 
					'	F.Intrinsic.String.Build("PTNR_ID:{0}_QB{1}_{2};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SHIP_TO",V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim,  V.Local.sLineShipID, V.Local.sLineRefPartnerID)
							F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sExportLocation.Trim, V.Local.sLineRefPartnerID)
							F.Data.DataTable.SetValue("envelope$TRANSACTION_LINE_PARTNER", 0,  "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y", "TRANSACTION_LINE_ID", V.Local.iCnt3)
						
							
							F.Intrinsic.String.Build("PTNR_ID:{0}_QB{1}_{2};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SHIP_TO",V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim,  V.Local.sLineShipID, V.Local.sLineRefPartnerID)
							F.Data.DataTable.SetValue("envelope$TRANSACTION_LINE_PARTNER", 1,  "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y", "TRANSACTION_LINE_ID", V.Local.iCnt3, "ADDRESS_LINE1", V.Local.sCustS2Address1.Trim, "ADDRESS_LINE2", V.Local.sCustS2Address2.Trim,"ADDRESS_LINE3", V.Local.sCustS2Address3.Trim,"ADDRESS_LINE4", V.Local.sCustS2Address4.Trim,"CITY", V.Local.sCustS2City.Trim, "COUNTRY_CODE", V.Local.sCusts2Country.Trim, "NAME", V.Local.sCustS2Name.Trim, "STATE", V.Local.sCustS2State.Trim, "POSTAL_CODE", V.Local.sCustS2Zip.Trim)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sExportLocation.Trim, V.Local.sLineRefPartnerID)
							F.Data.DataTable.SetValue("envelope$TRANSACTION_LINE_PARTNER", 0,  "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y", "TRANSACTION_LINE_ID", V.Local.iCnt3)
							F.Intrinsic.Control.If(V.DataTable.envelope$TRANSACTION_LINE_PARTNER.RowCount--,>,0)
								F.Data.DataTable.DeleteRow("envelope$TRANSACTION_LINE_PARTNER",1)
							F.Intrinsic.Control.EndIf
							
							F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE_PARTNER")
						F.Intrinsic.Control.EndIf
					'	F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE")
					'	F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE_PARTNER")
					
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",false)	
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE_PARTNER",false)
					F.Intrinsic.Control.Else
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",true)
						
						f.Data.DataTable.AddRow("envelope$TRANSACTION_LINE","COMMERCIAL_UOM", V.Local.sUM.Trim, "CURRENCY_CODE", V.Local.sCurrency.Trim, "LINE_ID", V.Local.sRecordNo.Trim, "LINE_TYPE", "MAIN","PRICE_UNIT", V.Local.fPrice, "QUANTITY", V.Local.fQty, "SOURCE_PROD_ID", V.Local.sTCPN.Trim, "REF_RESOLUTION_PRODUCT", V.Local.sLineResPrtnrID, "PROD_DESCRIPTION", V.Local.sLineDescription,"TRANSACTION_LINE_ID", V.Local.iCnt3,"TRANSACTION_HEADER_ID",0 )
						
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE_PARTNER",true)
						
						F.Intrinsic.Control.If(V.Local.sLineShipID.Trim,<>,V.Local.sTempShipID.Trim)
							F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sExportLocation.Trim,  V.Local.sLineRefPartnerID)
							F.Data.DataTable.AddRow("envelope$TRANSACTION_LINE_PARTNER","TRANSACTION_LINE_ID", V.Local.iCnt3, "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y")
						
							
							F.Intrinsic.String.Build("PTNR_ID:{0}_QB{1}_{2};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SHIP_TO",V.Local.sSAPCode.Trim, V.Local.sCustomer.Trim,  V.Local.sLineShipID, V.Local.sLineRefPartnerID)
							F.Data.DataTable.AddRow("envelope$TRANSACTION_LINE_PARTNER","TRANSACTION_LINE_ID", V.Local.iCnt3, "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y","ADDRESS_LINE1", V.Local.sCustS2Address1.Trim, "ADDRESS_LINE2", V.Local.sCustS2Address2.Trim,"ADDRESS_LINE3", V.Local.sCustS2Address3.Trim, "ADDRESS_LINE4", V.Local.sCustS2Address4.Trim,"CITY", V.Local.sCustS2City.Trim, "COUNTRY_CODE", V.Local.sCusts2Country.Trim, "NAME", V.Local.sCustS2Name.Trim, "STATE", V.Local.sCustS2State.Trim, "POSTAL_CODE", V.Local.sCustS2Zip.Trim)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sExportLocation.Trim, V.Local.sLineRefPartnerID)
							F.Data.DataTable.AddRow("envelope$TRANSACTION_LINE_PARTNER","TRANSACTION_LINE_ID", V.Local.iCnt3, "REF_RESOLUTION_PARTNER", V.Local.sLineRefPartnerID, "IS_PRIMARY_PTNR", "Y")
							F.Intrinsic.Control.If(V.DataTable.envelope$TRANSACTION_LINE_PARTNER.RowCount--,>,0)
								F.Data.DataTable.DeleteRow("envelope$TRANSACTION_LINE_PARTNER",1)
							F.Intrinsic.Control.EndIf
							F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE_PARTNER")
						F.Intrinsic.Control.EndIf
						
					'	F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE")
					'	F.Data.DataTable.AcceptChanges("envelope$TRANSACTION_LINE_PARTNER")
						
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",false)	
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE_PARTNER",false)
						
					F.Intrinsic.Control.EndIf
					
					'add line record to the ORD_DELIV table
					'build the string to see if the record exists
					'if it does, update it
					'if it doesn't, insert it
		
					F.Intrinsic.String.Build("SELECT * FROM GCG_6625_ORD_DELIV WHERE TRANS_TYPE = 'O' AND TRANS_ID = '{0}' AND POSNR = '{1}' ", V.Local.sOrderNo.Trim, V.Local.sRecordNo.Trim, V.Local.sSQL)
					F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet5)
					F.Intrinsic.Control.If(V.Local.sRet5.Trim,<>,"")
						'if it does, update it
						F.Intrinsic.String.Build("UPDATE GCG_6625_ORD_DELIV SET PASS_FAIL_DPL = 'X', PASS_FAIL_LIC = 'X', LIC_NUM = '', PASS_FAIL_DATA = 'X', PASS_FAIL_EUC = 'X'  WHERE TRANS_TYPE = 'O' AND TRANS_ID = '{0}' AND POSNR = '{1}' ", V.Local.sOrderNo.Trim, V.Local.sRecordNo.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.Else
						'if it doesn't, insert it
						F.Intrinsic.String.Build("INSERT INTO GCG_6625_ORD_DELIV (TRANS_ID, TRANS_TYPE, POSNR, STATUS3, PARTID, PASS_FAIL_DPL, PASS_FAIL_LIC, LIC_NUM, PASS_FAIL_DATA, PASS_FAIL_EUC) VALUES ('{0}', 'O', '{1}', 'O', '{2}', 'X','X','', 'X','X')", v.Local.sOrderNo.Trim, V.Local.sRecordNo.Trim, V.Local.sPart, V.Local.sSQL)
						F.ODBC.Connection!con.Execute(V.Local.sSQL)
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Next(V.Local.iCnt3)
			'adding logic to prevent the user from sending order headers that don't have any lines
			F.Intrinsic.Control.Else
				F.Intrinsic.UI.CloseWaitDialog
				F.Intrinsic.String.Build("Order {0} does not have any lines. The information cannot be sent to Trade Automation.", V.Local.sOrderNo, V.Local.sMessage)
				F.Intrinsic.UI.Msgbox(v.Local.sMessage, "Missing Lines")
				F.Intrinsic.Control.ExitSub
			F.Intrinsic.Control.EndIf
		
			F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
			'F.Data.DataTable.SaveToXML("envelope", 1, True, V.Local.sFQP)
			F.Data.DataTable.SAVEDATASETTOXML("envelope", 1, V.Local.sFQP)

			'Callsub to get the HTTP settings
			F.Intrinsic.Control.CallSub(HTTPSettings)
			'callsub to process the XML
			F.Intrinsic.Control.CallSub(ProcessXML)
			
	 		'set the select value back to 0 for the order and change the status
	 		F.Data.DataTable.SetValue("dtOrders", V.Local.iRow, "SEL", 0, "TCS_STATUS", "Awaiting TCS Status")
	 		F.Data.DataTable.AcceptChanges("dtOrders")
	 		
	 		f.Intrinsic.UI.Sleep(1)
	 	F.Intrinsic.Control.Next(V.Local.iCnt)
	 	F.Intrinsic.UI.CloseWaitDialog
	 F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
	F.Intrinsic.UI.Msgbox("The SAP Code has not been set up for this Company Code. You need to setup the associated SAP Code via System Support > Administration > TCS Maintenance (6625)", "Required Data")

	F.Intrinsic.Control.CallSub(f_Main_UnLoad)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickUpdateOrders.End

Program.Sub.MenuClickSelectOrders.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount--,>,-1)
	'set the SEL value to 1 for all records
	F.Data.DataTable.SetValue("dtOrders",-1, "SEL", 1)
	F.Data.DataTable.AcceptChanges("dtOrders")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickSelectOrders.End

Program.Sub.MenuClickDeselectOrders.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtOrders.RowCount--,>,-1)
	'set the SEL value to 0 for all records
	F.Data.DataTable.SetValue("dtOrders",-1, "SEL", 0)
	F.Data.DataTable.AcceptChanges("dtOrders")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickDeselectOrders.End

Program.Sub.MenuClickRefreshShipments.Start
F.Intrinsic.Control.Try
V.Local.bAwaitingStatus.Declare(Boolean)
V.Local.iCnt.Declare(Long)
v.Local.iCnt2.Declare(Long)
V.Local.sOrderNo.Declare(String)
V.Local.sOrderSeq.Declare(String)
V.Local.sPackingList.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sStatus.Declare(String)
V.Local.sStatus2.Declare(String)
V.Local.sRet.Declare(String)

F.Intrinsic.UI.InvokeWaitDialog("Refreshing Shipment Grid...", "Please Wait")


Gui.f_Main.cmdSearch.Enabled(False)
F.Intrinsic.Control.If(V.DataTable.dtShipments.Exists)
	F.Data.DataTable.Close("dtShipments")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Screen.f_Main!txtPackList.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,<>,"")
	v.Local.sOrderNo.Set(V.Screen.f_Main!txtOrderSrch.Text)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE B.ORDER_NO = '{0}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sOrderNo.Trim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
F.Intrinsic.Control.ElseIf(V.Screen.f_Main!txtPackList.Text,=,"", "AND", V.Screen.f_Main!txtOrderSrch.Text,=,"")
	F.Data.DataTable.CreateFromSQL("dtShipments", "con","SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO ORDER BY A.PCK_NO, B.ORDER_NO", True)
F.Intrinsic.Control.Else
	V.Local.sPackingList.Set(V.Screen.f_Main!txtPackList.Text)
	F.Intrinsic.String.Build("SELECT CONVERT(0, SQL_BIT) AS SEL, A.PCK_NO AS PACKING_LIST, B.ORDER_NO, B.SHIP_ID,B.CUSTOMER, '' AS TCS_STATUS FROM V_STAGING_HEADER A LEFT JOIN V_SHIPMENT_HEADER B ON A.PCK_NO = B.PCK_NO WHERE A.PCK_NO = '{0}' ORDER BY A.PCK_NO, B.ORDER_NO", V.Local.sPackingList.Trim, V.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("dtShipments", "con", V.Local.sSQL, True)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.DataTable.dtShipments$dtShipmentLines.Exists,=,True)
	F.Data.DataTable.Close("dtShipments$dtShipmentLines")
F.Intrinsic.Control.EndIf

'create child datatable for shipment lines
F.Data.DataTable.AddTable("dtShipments", "dtShipmentLines")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PACKING_LIST", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "ORDER_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "RECORD_NO", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PART", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "LOC", "STRING")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_ORDERED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "QTY_SHIPPED", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "PRICE", "FLOAT")
F.Data.DataTable.AddColumn("dtShipments$dtShipmentLines", "TCS_STATUS", "STRING")

'loop through the shipment header table - use the shipment number to get the lines
F.Intrinsic.Control.For(V.Local.iCnt,0, V.DataTable.dtShipments.RowCount--,1)
	V.Local.sPackingList.Set(V.DataTable.dtShipments(V.Local.iCnt).PACKING_LIST!FieldValTrim)
	v.Local.sOrderNo.Set(v.DataTable.dtShipments(v.Local.iCnt).ORDER_NO!FieldValTrim)
	F.Intrinsic.String.Build("SELECT PCK_NO AS PACKING_LIST, ORDER_NO, ORDER_REC AS RECORD_NO, PART, LOCATION, QTY_ORDERED, QTY_SHIPPED, PRICE, '' AS TCS_STATUS FROM V_SHIPMENT_LINES WHERE ORDER_NO = '{0}' AND PCK_NO ='{1}' AND LINE_TYPE <> 'F'", V.Local.sOrderNo.Trim, v.Local.sPackingList.Trim, V.Local.sSQL)
	'check to see if the temp datatable exists. if it does, close it
	F.Intrinsic.Control.If(V.DataTable.dtTemp.Exists,=,True)
		F.Data.DataTable.Close("dtTemp")
	F.Intrinsic.Control.EndIf
	'create temp data table to get the order line information
	F.Data.DataTable.CreateFromSQL("dtTemp", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtTemp.RowCount--,>,-1)
		F.Intrinsic.Control.For(V.Local.iCnt2, 0, V.DataTable.dtTemp.RowCount--,1)
			'get the TCS status for each shipment line 
			'build query to pull status for shipment line
			F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND POSNR = '{1}' AND PACKING_LIST = '{2}' ", V.Local.sOrderNo.Trim, V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, v.Local.sPackingList.Trim, V.Local.sSQL)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
				F.Data.DataTable.Close("dtShipStatus")
			F.Intrinsic.Control.EndIf
			
			F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
			F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
			
				F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
				F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
			
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
					V.Local.sStatus.Set("DPL Fail Status")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("")
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; LIC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("LIC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; Data Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("Data Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
				
				F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
						F.Intrinsic.String.Build("{0}; EUC Fail Status", V.Local.sStatus, V.Local.sStatus)
					F.Intrinsic.Control.Else
						V.Local.sStatus.Set("EUC Fail Status")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.Else
					F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
						V.Local.sStatus.Set("")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
		
				F.Data.DataView.Close("dtShipStatus","dvDPL")
				F.Data.DataView.Close("dtShipStatus","dvLIC")
				F.Data.DataView.Close("dtShipStatus","dvData")
				F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
					F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
					F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
						V.Local.sStatus2.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						V.Local.sStatus2.Set("")
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
							F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
						F.Intrinsic.Control.Else
							V.Local.sStatus2.Set("Awaiting TCS Status")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus2.Set("")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
					F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
						V.Local.sStatus.Set("Awaiting TCS Status")
					F.Intrinsic.Control.Else
						F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
							V.Local.sStatus.Set("TA Line Pass")
						F.Intrinsic.Control.EndIf
					F.Intrinsic.Control.EndIf
					
					F.Data.DataView.Close("dtShipStatus","dvDPL")
					F.Data.DataView.Close("dtShipStatus","dvLIC")
					F.Data.DataView.Close("dtShipStatus","dvData")
					F.Data.DataView.Close("dtShipStatus","dvEUC")
				
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
			
				V.Local.sStatus.Set("Unscreened Order Line")
			F.Intrinsic.Control.EndIf	
	
			F.Data.DataTable.Close("dtShipStatus")
				
			'add the order lines to the child grid
			F.Data.DataTable.AddRow("dtShipments$dtShipmentLines","PACKING_LIST", v.DataTable.dtTemp(v.Local.iCnt2).PACKING_LIST!FIeldValTrim,"ORDER_NO", V.DataTable.dtTemp(V.Local.iCnt2).ORDER_NO!FieldValTrim, "RECORD_NO", V.DataTable.dtTemp(V.Local.iCnt2).RECORD_NO!FieldValTrim, "PART", v.DataTable.dtTemp(V.Local.iCnt2).PART!FieldVal, "LOC", V.DataTable.dtTemp(V.Local.iCnt2).LOCATION!FieldValTrim, "QTY_ORDERED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_ORDERED!FieldValFloat, "QTY_SHIPPED", V.DataTable.dtTemp(V.Local.iCnt2).QTY_SHIPPED!FieldValFloat,"PRICE", V.DataTable.dtTemp(V.Local.iCnt2).PRICE!FieldValFloat, "TCS_STATUS", V.Local.sStatus.Trim)
		F.Intrinsic.Control.Next(V.Local.iCnt2)
	F.Intrinsic.Control.EndIf

	'build query to pull TCS Status
	F.Intrinsic.String.Build("SELECT PASS_FAIL_DPL, PASS_FAIL_LIC, PASS_FAIL_DATA, PASS_FAIL_EUC FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND PACKING_LIST = '{1}' AND (POSNR <> '' OR POSNR IS NOT NULL) ", V.Local.sOrderNo.Trim, V.Local.sPackingList.Trim, V.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.Exists)
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.EndIf
	F.Data.DataTable.CreateFromSQL("dtShipStatus", "con", V.Local.sSQL, True)
	F.Intrinsic.Control.If(V.DataTable.dtShipStatus.RowCount--,>,-1)
		F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'Y'", "")
		F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'Y'", "")
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
			V.Local.sStatus.Set("DPL Fail Status")
		F.Intrinsic.Control.Else
			V.Local.sStatus.Set("")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}LIC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("LIC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}Data Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("Data Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,<>,"")
				F.Intrinsic.String.Build("{0}{1}EUC Fail Status", V.Local.sStatus, V.Ambient.NewLine, V.Local.sStatus)
			F.Intrinsic.Control.Else
				V.Local.sStatus.Set("EUC Fail Status")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Else
			F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
				V.Local.sStatus.Set("")
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.EndIf
		
		F.Data.DataView.Close("dtShipStatus","dvDPL")
		F.Data.DataView.Close("dtShipStatus","dvLIC")
		F.Data.DataView.Close("dtShipStatus","dvData")
		F.Data.DataView.Close("dtShipStatus","dvEUC")
		
		F.Intrinsic.Control.If(V.Local.sStatus.Trim,=,"")
			F.Data.DataView.Create("dtShipStatus", "dvDPL", 22, "[PASS_FAIL_DPL] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvLIC", 22, "[PASS_FAIL_LIC] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvData", 22, "[PASS_FAIL_DATA] = 'X'", "")
			F.Data.DataView.Create("dtShipStatus", "dvEUC", 22, "[PASS_FAIL_EUC] = 'X'", "")
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvDPL.RowCount--,>,-1)
				V.Local.sStatus2.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				V.Local.sStatus2.Set("")
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvLIC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvData.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.Control.If(V.DataView.dtShipStatus!dvEUC.RowCount--,>,-1)
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,<>,"")
					F.Intrinsic.String.Build("{0}{1}Awaiting TCS Status", V.Local.sStatus2, V.Ambient.NewLine, V.Local.sStatus2)
				F.Intrinsic.Control.Else
					V.Local.sStatus2.Set("Awaiting TCS Status")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")
					V.Local.sStatus2.Set("")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Intrinsic.String.IsInString(V.Local.sStatus2, "Awaiting TCS Status", True, V.Local.bAwaitingStatus)
			F.Intrinsic.Control.If(V.Local.bAwaitingStatus,=,True)
				V.Local.sStatus.Set("Awaiting TCS Status")
			F.Intrinsic.Control.Else
				F.Intrinsic.Control.If(V.Local.sStatus2.Trim,=,"")	
					V.Local.sStatus.Set("TA Pass")
				F.Intrinsic.Control.Else
					V.Local.sStatus.Set("Line(s) have failed TA Screen")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			
			F.Data.DataView.Close("dtShipStatus","dvDPL")
			F.Data.DataView.Close("dtShipStatus","dvLIC")
			F.Data.DataView.Close("dtShipStatus","dvData")
			F.Data.DataView.Close("dtShipStatus","dvEUC")
			
		f.Intrinsic.Control.Else
			V.Local.sStatus.Set("Line(s) have failed TA Screen")
		F.Intrinsic.Control.EndIf
			
		F.Data.DataTable.Close("dtShipStatus")
	F.Intrinsic.Control.Else
		V.Local.sStatus.Set("Unscreened Shipment")
	F.Intrinsic.Control.EndIf	

	
	F.Data.DataTable.SetValue("dtShipments", V.Local.iCnt, "TCS_STATUS",V.Local.sStatus.Trim)
	'if there are any fails on any of the lines, write 'Order Line(s) have failed TA Screen' to the order header TCS Status
F.Intrinsic.Control.Next(V.Local.iCnt)

Gui.f_Main.txtOrderSrch.Text("")
Gui.f_Main.txtPackList.Text("")
'callsub to format the grid
F.Intrinsic.Control.CallSub(FormatShipmentGrid)

F.Intrinsic.UI.CloseWaitDialog

Gui.f_Main.cmdSearch.Enabled(True)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickRefreshShipments.End

Program.Sub.MenuClickUpdateShipments.Start
F.Intrinsic.Control.Try
V.Local.iCnt.Declare(Long)
V.Local.iCnt2.Declare(Long)
V.Local.iRows.Declare(Long)
v.Local.iRow.Declare(Long)
V.Local.sCustomer.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sRecordNo.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTemp.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sRet2.Declare(String)
V.Local.sSelected.Declare(String)
V.Local.sFQP.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sTempFQP.Declare(String)
V.Local.sSAPCode.Declare(String)
V.Local.sShipToID.Declare(String)
V.Local.sPartnerID.Declare(String)
V.Local.sCountry.Declare(String)
v.Local.sCurrency.Declare(String)
V.Local.sPckNo.Declare(String)
V.Local.sResolutionPrtnrID.Declare(String)
V.Local.sShipToRefResolution.Declare(String)
V.Local.sSoldToRefResol.Declare(String)
V.Local.sBillToRefResolution.Declare(String)
V.Local.sPart.Declare(String)
V.Local.sLoc.Declare(String)
V.Local.sUM.Declare(String)
V.Local.fQty.Declare(Float)
V.Local.fPrice.Declare(Float)
V.Local.sRev.Declare(String)
V.Local.sLineDescription.Declare(String)
V.Local.sPartDescription.Declare(String)
V.Local.sLineResPrtnrID.Declare(String)
V.Local.sTCPN.Declare(String)
V.Local.sShipSuffix.Declare(String)
V.Local.sTXID.Declare(String)
V.Local.sRet3.Declare(String)
V.Local.sOrgCode.Declare(String)
V.Local.sRet4.Declare(String)
V.Local.sSalesOrg.Declare(String)
V.Local.sPlant.Declare(String)
V.Local.sB2Name.Declare(String)
V.Local.sB2Addr1.Declare(String)
V.Local.sB2Addr2.Declare(String)
V.Local.sB2Addr3.Declare(String)
V.Local.sB2Addr4.Declare(String)
V.Local.sB2Addr5.Declare(String)
V.Local.sB2City.Declare(String)
V.Local.sB2State.Declare(String)
V.Local.sB2Zip.Declare(String)
V.Local.sB2Country.Declare(String)
V.Local.sS2Name.Declare(String)
V.Local.sS2Addr1.Declare(String)
V.Local.sS2Addr2.Declare(String)
V.Local.sS2Addr3.Declare(String)
V.Local.sS2Addr4.Declare(String)
V.Local.sS2Addr5.Declare(String)
V.Local.sS2City.Declare(String)
V.Local.sS2State.Declare(String)
V.Local.sS2Zip.Declare(String)
V.Local.sS2Country.Declare(String)
V.Local.sTempName.Declare(String)
V.Local.sTempAddr1.Declare(String)
V.Local.sTempAddr2.Declare(String)
V.Local.sTempAddr3.Declare(String)
V.Local.sTempAddr4.Declare(String)
V.Local.sTempAddr5.Declare(String)
V.Local.sTempCity.Declare(String)
V.Local.sTempState.Declare(String)
V.Local.sTemp2Zip.Declare(String)
V.Local.sTempCountry.Declare(String)
V.Local.sFullB2Address.Declare(String)
V.Local.sTempPckNo.Declare(String)
V.Local.fAllocated.Declare(Float)
V.Local.bMatch.Declare(Boolean)
V.Local.sSelectedRows.Declare(String)
V.Local.sTempOrder.Declare(String)
V.Local.sRet5.Declare(String)
V.Local.iCnt3.Declare(Long)
V.Local.sCompanyCountry.Declare(String)
V.Local.sXMLFileName.Declare(String)
V.Local.sEndUserFQP.Declare(String)
V.Local.sCust.Declare(String)
V.Local.bFileExists.Declare(Boolean)
V.Local.sXMLResponseFile.Declare(String)
V.Local.sResponseData.Declare(String)
V.Local.sDataPacket.Declare(String)
V.Local.sCountryCode.Declare(String)
V.Local.sProdDesc.Declare(String)
V.Local.dImportDate.Declare(Date)
V.Local.sImportDate.Declare(String)
V.Local.sImportHTS.Declare(String)
V.Local.dExportDate.Declare(Date)
V.Local.sExportDate.Declare(String)
V.Local.sExportHTS.Declare(String)
V.Local.sECN.Declare(String)
v.Local.sCRLF.Declare(String)
v.Local.sResponsePacket.Declare(String)
V.Local.sTempPartFQP.Declare(String)
V.Local.baValue.Declare(ByteArray)
V.Local.sRet6.Declare(String)
V.Local.sTemp2.Declare(String)

V.Global.sSubmitType.Set("SHIPMENT")
'set the sender value
F.Intrinsic.String.Build("GSS_{0}", V.Caller.CompanyCode, V.Local.sSender)

'build file path for sample datapacket
F.Intrinsic.String.Build("{0}\tempDeliv.xml", V.Caller.FilesDir, V.Local.sTempFQP)

'Check to see if the datatable already exists. If it does, close it
F.Intrinsic.Control.If(V.DataTable.envelope.Exists)
	F.Data.DataTable.Close("envelope")
F.Intrinsic.Control.EndIf

'load sample packet into datatbale
F.Data.DataTable.CreateDatasetFromXML("envelope", V.Local.sTempFQP, True)

F.ODBC.Connection!con.ExecuteAndReturn("SELECT COUNTRY FROM V_COMPANY WHERE REC = 1", v.Local.sCompanyCountry)

'query custom cocode maint to get the SAP code for the company code
F.Intrinsic.String.Build("SELECT SAP_CODE FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}'", V.Caller.CompanyCode, V.Local.sSQL)
F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet)
F.Intrinsic.Control.If(V.Local.sRet.Trim,<>,"")
	V.Local.sSAPCode.Set(V.Local.sRet.Trim)
	'query ccode maint to get org code
	F.Intrinsic.String.Build("SELECT ORG_CODE, SALES_ORG, TEC_PLANT FROM GCG_6625_CCODE_MAINT WHERE GSS_CODE = '{0}' AND SAP_CODE = '{1}'", V.Caller.CompanyCode, V.Local.sSAPCode.Trim, V.Local.sSQL)
	F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
	F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
		F.Intrinsic.String.Split(V.Local.sRet4,"*!*",V.Local.sRet4)
		v.Local.sOrgCode.Set(V.Local.sRet4(0).Trim)
		V.Local.sSalesOrg.Set(V.Local.sRet4(1).Trim)
		V.Local.sPlant.Set(V.Local.sRet4(2).Trim)
	F.Intrinsic.Control.EndIf
	
	F.Data.DataTable.AcceptChanges("dtShipments")
	
	F.Intrinsic.UI.InvokeWaitDialog("Building XML...", "Please Wait")
	
	'get the shipments the user has selected
	 F.Data.DataTable.Select("dtShipments", "[SEL] = 1", V.Local.sSelectedRows)
	 'check to make sure the user has selected rows
	 F.Intrinsic.Control.If(V.Local.sSelectedRows.Trim,<>,"***NORETURN***")
	 	'split the rows
	 	F.Intrinsic.String.Split(V.Local.sSelectedRows, "*!*", V.Local.sSelectedRows)
	 	'loop through the selected rows and get the information to build the Shipment XML
	 	F.Intrinsic.Control.For(V.Local.iCnt, 0, V.Local.sSelectedRows.UBound,1)
	 		V.Local.iRow.Set(V.Local.sSelectedRows(V.Local.iCnt).Long)
	 		V.Local.sPckNo.Set(V.DataTable.dtShipments(V.Local.iRow).PACKING_LIST!FieldValTrim)
	 		F.Intrinsic.String.LPad(V.Local.sPckNo, "0", 7, V.Local.sPckNo)
	 		F.Intrinsic.String.Build("QB{0}", v.Local.sPckNo.Trim, v.Local.sTempPckNo)
	 		V.Local.sOrderNo.Set(V.DataTable.dtShipments(V.Local.iRow).ORDER_NO!FieldValTrim)
	 		F.Intrinsic.String.LPad(V.Local.sOrderNo, "0", 7, V.Local.sOrderNo)
	 		V.Local.sCustomer.Set(V.DataTable.dtShipments(V.Local.iRoW).CUSTOMER!FieldValTrim)
	 		
	 		F.Intrinsic.String.Build("SELECT ORDER_CURRENCY FROM V_SHIPMENT_HEADER WHERE ORDER_NO = '{0}' AND PCK_NO = '{1}'", v.Local.sOrderNo.Trim, v.Local.sPckNo.Trim, v.Local.sSQL)
	 		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sCurrency)
	 		
	 		F.Intrinsic.String.Build("SELECT SHIP_ID FROM V_SHIPMENT_HEADER WHERE ORDER_NO = '{0}' AND PCK_NO = '{1}'", v.Local.sOrderNo.Trim, v.Local.sPckNo.Trim, v.Local.sSQL)
	 		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sShipToID)
	 		
	 		F.Intrinsic.Control.If(V.Local.sShipToID.Trim,=,"")
	 			V.Local.sShipToID.Set("000000")
	 		F.Intrinsic.Control.EndIf
	 		
	 		'query shipment header and shipment lines to get the information needed to build the XML
	 		'country
	 		'address 1
	 		'city
	 		'country
	 		'name
	 		'postal code
	 		F.Intrinsic.String.Build("SELECT NAME_CUSTOMER_SHIP, ADDRESS_1_SHIP,ADDRESS_2_SHIP, ADDRESS_3_SHIP, ADDRESS_4_SHIP,ADDRESS_5_SHIP,CITY_SHIP, CODE_ZIP_SHIP, COUNTRY_SHIP FROM V_SHIPMENT_SHIPTO WHERE ORDER_NO = '{0}' AND PCK_NO = '{1}' AND CUSTOMER = '{2}'", V.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, V.Local.sCustomer.Trim, V.Local.sSQL)
	 		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet2)
	 		F.Intrinsic.Control.If(V.Local.sRet2.Trim,<>,"")
	 			F.Intrinsic.String.Split(V.Local.sRet2,"*!*", V.Local.sRet2)
	 			V.Local.sS2Name.Set(V.Local.sRet2(0).Trim)
	 			V.Local.sS2Addr1.Set(V.Local.sRet2(1).Trim)
	 			V.Local.sS2Addr2.Set(V.Local.sRet2(2).Trim)
	 			V.Local.sS2Addr3.Set(V.Local.sRet2(3).Trim)
	 			V.Local.sS2Addr4.Set(V.Local.sRet2(4).Trim)
	 			V.Local.sS2Addr5.Set(V.Local.sRet2(5).Trim)
	 			V.Local.sS2City.Set(V.Local.sRet2(6).Trim)
	 			V.Local.sS2Zip.Set(V.Local.sRet2(7).Trim)
	 			V.Local.sS2Country.Set(V.Local.sRet2(8).Trim)
	 			
				F.Intrinsic.Control.If(V.Local.sS2Addr5.Trim, <>,"")
					F.Intrinsic.String.Build("{0} {1}", V.Local.sS2Addr4.Trim, V.Local.sS2Addr5.Trim, V.Local.sS2Addr4)
				F.Intrinsic.Control.EndIf
	 			
	 			'query the shipment bill to information to get the same for billing
	 			F.Intrinsic.String.Build("SELECT NAME_CUSTOMER, ADDRESS_1, ADDRESS_2,  ADDRESS_3,  ADDRESS_4,  ADDRESS_5, CITY, ZIP, COUNTRY FROM V_SHIPMENT_BILLTO WHERE ORDER_NO = '{0}' AND PCK_NO = '{1}' AND CUSTOMER = '{2}'", V.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, V.Local.sCustomer.Trim, V.Local.sSQL)
	 			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet3)
	 			F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"")
	 				f.Intrinsic.String.Split(V.Local.sRet3.Trim,"*!*", V.Local.sRet3)
	 				V.Local.sB2Name.Set(V.Local.sRet3(0).Trim)
	 				V.Local.sB2Addr1.Set(V.Local.sRet3(1).Trim)
	 				V.Local.sB2Addr2.Set(V.Local.sRet3(2).Trim)
	 				V.Local.sB2Addr3.Set(V.Local.sRet3(3).Trim)
	 				V.Local.sB2Addr4.Set(V.Local.sRet3(4).Trim)
	 				V.Local.sB2Addr5.Set(V.Local.sRet3(5).Trim)
	 				V.Local.sB2City.Set(V.Local.sRet3(6).Trim)
	 				V.Local.sB2Zip.Set(V.Local.sRet3(7).Trim)
	 				V.Local.sB2Country.Set(V.Local.sRet3(8).Trim)
	 			F.Intrinsic.Control.Else
	 				V.Local.sB2Name.Set("")
	 				V.Local.sB2Addr1.Set("")
	 				V.Local.sB2Addr2.Set("")
	 				V.Local.sB2Addr3.Set("")
	 				V.Local.sB2Addr4.Set("")
	 				V.Local.sB2Addr5.Set("")
	 				V.Local.sB2City.Set("")
	 				V.Local.sB2Zip.Set("")
	 				V.Local.sB2Country.Set("")
	 			F.Intrinsic.Control.EndIf
	 			
	 			F.Intrinsic.Control.If(V.Local.sB2Addr5.Trim, <>,"")
					F.Intrinsic.String.Build("{0} {1}", V.Local.sB2Addr4.Trim, V.Local.sB2Addr5.Trim, V.Local.sB2Addr4)
				F.Intrinsic.Control.EndIf
	 			
	 		F.Intrinsic.Control.Else
	 			F.Intrinsic.UI.Msgbox("The Staged Shipment has not been saved. You must save the Staged Shipment before you can continue.", "Missing Shipment Information")
	 			F.Intrinsic.UI.CloseWaitDialog
	 			F.Intrinsic.Control.ExitSub
	 		F.Intrinsic.Control.EndIf
	 		
	 		''ref resolution partner = PTNR_ID:Country of export-EXPORTER-01:PTNR_ORG_CODE:TEC_MASTER:PTNR_TYPE:EXPORTER
			F.Intrinsic.String.Build("PTNR_ID:{0}-EXPORTER-01;PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:EXPORTER", V.Local.sCompanyCountry.Trim, V.Local.sResolutionPrtnrID)
			
			'build ship to address ID - Customer name, ship to id (000 if it's the original ship to)
			F.Intrinsic.String.Build("PTNR_ID:{2}_QB{0}_{1};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SHIP_TO", V.Local.sCustomer.Trim, V.Local.sShipToID.Trim, V.Local.sSAPCode.Trim, V.Local.sShipToRefResolution)
			
			'build bill to address ID - Customer name, ship to id (000 if it's the original ship to)
			F.Intrinsic.String.Build("PTNR_ID:{1}_QB{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:SOLD_TO", V.Local.sCustomer.Trim, v.Local.sSAPCode.Trim, V.Local.sSoldToRefResol)
			
			'build bill to address ID - Customer name, ship to id (000 if it's the original ship to)
			F.Intrinsic.String.Build("PTNR_ID:{1}_QB{0};PTNR_ORG_CODE:TEC_MASTER;PTNR_TYPE:BILL_TO", V.Local.sCustomer.Trim, v.Local.sSAPCode.Trim,V.Local.sBillToRefResolution)
			
			F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$INTEGRATION_MESSAGE_CONTROL.RowCount--,1)
				'org code will eventually be maintained in settings table
				F.Data.DataTable.SetValue("envelope$INTEGRATION_MESSAGE_CONTROL", V.Local.iCnt3, "ACTION", "FULL_UPDATE", "ORG_CODE", V.Local.sOrgCode.Trim, "SENDER", V.Local.sSender.Trim, "BATCH_ID", "")
			F.Intrinsic.Control.Next(V.Local.iCnt3)
			
			F.Intrinsic.Control.For(V.Local.iCnt3, 0, V.DataTable.envelope$BUS_KEY.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$BUS_KEY", V.Local.iCnt3,"ORG_CODE", V.Local.sOrgCode.Trim, "TX_ID", V.Local.sTempPckNo.Trim)
			F.Intrinsic.Control.Next(V.Local.iCnt3)

			F.Intrinsic.Control.For(V.Local.iCnt3,0, V.DataTable.envelope$TRANSACTION_HEADER.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER", V.Local.iCnt3, "CURRENCY_CODE", V.Local.sCurrency.Trim, "ORG_CODE", V.Local.sOrgCode.Trim, "SOURCE_SYSTEM", V.Local.sSender.Trim, "SOURCE_TX_ID", V.Local.sTempPckNo.Trim, "CTRY_OF_EXPORT", V.Local.sCompanyCountry.Trim, "TX_ID", V.Local.sTempPckNo.Trim, "TX_STATE", "O")
			F.Intrinsic.Control.Next(V.Local.iCnt3)
			
			F.Intrinsic.Control.For(V.Local.iCnt3,0, V.DataTable.envelope$MDI_TX_IMPL_TX_DEFAULT.RowCount--,1)
				F.Data.DataTable.SetValue("envelope$MDI_TX_IMPL_TX_DEFAULT", V.Local.iCnt3, "TEC_SALES_ORG", V.Local.sSalesOrg.Trim, "TEC_SO_NUMBER", V.Local.sOrderNo.Trim, "TEC_PLANT",V.Local.sPlant.Trim, "EUC_FLAG", "")
			F.Intrinsic.Control.Next(V.Local.iCnt3)
		
		
			F.Intrinsic.Control.If(V.DataTable.envelope$TRANSACTION_HEADER_PARTNER.RowCount--,>,-1)
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 0, "REF_RESOLUTION_PARTNER", V.Local.sResolutionPrtnrID.Trim)
				'update ship to information
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 1, "REF_RESOLUTION_PARTNER", V.Local.sShipToRefResolution.Trim, "ADDRESS_LINE1", V.Local.sS2Addr1.Trim, "ADDRESS_LINE2", V.Local.sS2Addr2.Trim,"ADDRESS_LINE3", V.Local.sS2Addr3.Trim, "ADDRESS_LINE4", V.Local.sS2Addr4.Trim, "CITY",V.Local.sS2City.Trim, "COUNTRY_CODE", V.Local.sS2Country.Trim, "NAME", V.Local.sS2Name.Trim, "POSTAL_CODE", V.Local.sS2Zip.Trim)
				'update bill to records
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 2, "REF_RESOLUTION_PARTNER", V.Local.sSoldToRefResol.Trim,"ADDRESS_LINE1", V.Local.sB2Addr1.Trim,"ADDRESS_LINE2", V.Local.sB2Addr2.Trim,"ADDRESS_LINE3", V.Local.sB2Addr3.Trim,"ADDRESS_LINE4", V.Local.sB2Addr4.Trim, "CITY",V.Local.sB2City.Trim, "COUNTRY_CODE", V.Local.sB2Country.Trim, "NAME", V.Local.sB2Name.Trim, "POSTAL_CODE", V.Local.sB2Zip.Trim)
				'update bill to information
				F.Data.DataTable.SetValue("envelope$TRANSACTION_HEADER_PARTNER", 3, "REF_RESOLUTION_PARTNER", V.Local.sBillToRefResolution.Trim)
			F.Intrinsic.Control.EndIf
		
			F.Data.DataTable.AcceptChanges("envelope")
	 		
	 		'query shipment lines to get the following information
	 		'PART
	 		'LOC
	 		'UM
	 		'currency
	 		'price
	 		'tcpn, if long part, get it from inv_extra
	 		'qty
	 		F.Intrinsic.String.Build("SELECT ORDER_REC, QTY_SHIPPED, PART, LOCATION, UM_ORDER, PRICE, EXCHANGE_CURRENCY FROM V_SHIPMENT_LINES WHERE ORDER_NO = '{0}' AND PCK_NO = '{1}' AND CUSTOMER = '{2}' AND LINE_TYPE <> 'F' ORDER BY ORDER_REC", V.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, V.Local.sCustomer.Trim, V.Local.sSQL)
	 		F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet3)
	 		F.Intrinsic.Control.If(V.Local.sRet3.Trim,<>,"")
	 			F.Intrinsic.String.Split(V.Local.sRet3,"#$#", V.Local.sRet3)
	 			F.Intrinsic.Control.For(V.Local.iCnt2,V.Local.sRet3.LBound, V.Local.sRet3.UBound,1)
	 				F.Intrinsic.String.Split(V.Local.sRet3(V.Local.iCnt2),"*!*", V.Local.sRet5)
	 				F.Intrinsic.Control.If(V.Local.sRet5.Trim,<>,"")
	 					V.Local.sRecordNo.Set(V.Local.sRet5(0).Trim)
	 					V.Local.fQty.Set(V.Local.sRet5(1).Float)
	 					V.Local.sPart.Set(V.Local.sRet5(2))
	 					V.Local.sLoc.Set(V.Local.sRet5(3).Trim)
	 					V.Local.sUM.Set(V.Local.sRet5(4).Trim)
	 					V.Local.fPrice.Set(V.Local.sRet5(5).Float)
	 					V.Local.sCurrency.Set(V.Local.sRet5(6).Trim)
	 					
	 					F.Intrinsic.Control.If(V.Local.fPrice,=,0)
							'query inventory cost to pull cost
							'If 0, pull total cost from INVENTORY_COST
							F.Intrinsic.String.Build("SELECT COST FROM V_INVENTORY_COST WHERE PART = '{0}' AND LOCN = '{1}'", V.Local.sPart, V.Local.sLoc, V.Local.sSQL)
							F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.fPrice)
							F.Intrinsic.Control.If(V.Local.fPrice,=,0)
								V.Local.fPrice.Set(0.01)
							F.Intrinsic.Control.EndIf
						F.Intrinsic.Control.EndIf	
						
						F.Intrinsic.String.IsInString(V.Local.sPart, "||", True, V.Local.bMatch)
						F.Intrinsic.Control.If(V.Local.bMatch,=,True)
							'get the display part from inv_lxr
							F.Intrinsic.String.Build("SELECT DISPLAY_PART FROM INV_LXR WHERE GSS_PART = '{0}'", v.Local.sPart, v.Local.sSQL)
							F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sTCPN)
						F.Intrinsic.Control.Else
							'get the left 16 of the part becuase the revision isn't needed
							F.Intrinsic.String.Left(v.Local.sPart, 17, V.Local.sTCPN)
						F.Intrinsic.Control.EndIf
						
						F.Intrinsic.String.Build("PROD_ID:{0};PROD_ORG_CODE:TEC_MASTER||", V.Local.sTCPN.Trim, V.Local.sLineResPrtnrID)
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",true)
						F.Intrinsic.Control.If(V.Local.iCnt2,=,0)
							F.Data.DataTable.SetValue("envelope$TRANSACTION_LINE", 0, "COMMERCIAL_UOM", V.Local.sUM.Trim, "CTRY_OF_ORIGIN", V.Local.sCompanyCountry.Trim,"CURRENCY_CODE", V.Local.sCurrency.Trim, "CUSTOMS_PRICE_UNIT", V.Local.fPrice, "LINE_ID", V.Local.sRecordNo.Trim, "PRICE_UNIT", V.Local.fPrice, "QUANTITY", V.Local.fQty, "SOURCE_PROD_ID", V.Local.sTCPN.Trim, "REF_RESOLUTION_PRODUCT", V.Local.sLineResPrtnrID, "TRANSACTION_HEADER_ID", 0)
						F.Intrinsic.Control.Else
							
							F.Data.DataTable.AddRow("envelope$TRANSACTION_LINE", "COMMERCIAL_UOM", V.Local.sUM.Trim, "CTRY_OF_ORIGIN", V.Local.sCompanyCountry.Trim,"CURRENCY_CODE", V.Local.sCurrency.Trim, "CUSTOMS_PRICE_UNIT", V.Local.fPrice, "LINE_ID", V.Local.sRecordNo.Trim,"LINE_TYPE", "MAIN","PRICE_UNIT", V.Local.fPrice, "QUANTITY", V.Local.fQty, "SOURCE_PROD_ID", V.Local.sTCPN.Trim, "REF_RESOLUTION_PRODUCT", V.Local.sLineResPrtnrID, "TRANSACTION_HEADER_ID", 0)
						F.Intrinsic.Control.EndIf
						F.Data.DataTable.ShowHiddenColumns("envelope$TRANSACTION_LINE",false)	

					'query ord deliv table to see if a record exists. If it does, update it. Otherwise, delete it
						F.Intrinsic.String.Build("SELECT TRANS_ID FROM GCG_6625_ORD_DELIV WHERE TRANS_ID = '{0}' AND PACKING_LIST = '{1}' AND TRANS_TYPE = 'D' AND POSNR = '{2}' AND (STATUS3 = 'O' OR STATUS3 = 'H')", V.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, v.Local.sRecordNo.Trim, V.Local.sSQL)
						F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
						F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
							F.Intrinsic.String.Build("UPDATE GCG_6625_ORD_DELIV SET STATUS3 = 'O',PASS_FAIL_DPL = 'X', PASS_FAIL_LIC = 'X', LIC_NUM = '', PASS_FAIL_DATA = 'X', PASS_FAIL_EUC = 'X' WHERE TRANS_ID = '{0}' AND TRANS_TYPE = 'D' AND POSNR = '{1}' AND PACKING_LIST = '{2}' ", v.Local.sOrderNo.Trim, V.Local.sRecordNo.Trim, V.Local.sPckNo.Trim, v.Local.sSQL)
							F.ODBC.Connection!con.Execute(V.Local.sSQL)
						F.Intrinsic.Control.Else
							F.Intrinsic.String.Build("INSERT INTO GCG_6625_ORD_DELIV (TRANS_ID, TRANS_TYPE, POSNR,STATUS3,PASS_FAIL_DPL, PASS_FAIL_LIC, LIC_NUM, PASS_FAIL_DATA, PASS_FAIL_EUC, PARTID, PACKING_LIST) VALUES ('{0}', 'D','{1}', 'O', 'X', 'X', '', 'X', 'X', '{2}', '{3}')", V.Local.sOrderNo.Trim, V.Local.sRecordNo.Trim, V.Local.sTCPN.Trim, V.Local.sPckNo.Trim, V.Local.sSQL)
							F.ODBC.Connection!con.Execute(V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						
	 				F.Intrinsic.Control.EndIf

			
						'send the part classification XML to PIPO to get the information
					'build file path for sample datapacket
					F.Intrinsic.String.Build("{0}\tempPartClass.xml", V.Caller.FilesDir,V.Local.sTempPartFQP)
					
					'Check to see if the datatable already exists. If it does, close it
					F.Intrinsic.Control.If(V.DataTable.envelope1.Exists)
						F.Data.DataTable.Close("envelope1")
					F.Intrinsic.Control.EndIf
					
					'load sample packet into datatbale
					F.Data.DataTable.CreateDatasetFromXML("envelope1", V.Local.sTempPartFQP, True)
					
					'send the part classification XML to PIPO to get the information
					F.Data.DataTable.SetValue("envelope1$BUS_KEY", 0, "TCPN", V.Local.sTCPN.Trim)
					
					'build XML File name
					F.Intrinsic.String.Build("{0}\{1}_{2}_PartSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
					F.Data.DataTable.SAVEDATASETTOXML("envelope1", 1, V.Local.sFQP)
					
					F.Intrinsic.Control.If(V.DataTable.envelope1.Exists)
						F.Data.DataTable.Close("envelope1")
					F.Intrinsic.Control.EndIf
					
					'get the part classification credentials and url 
					'set the username and password - will need to have a maintenance program for them to setup Username and Password for TA
					'open Common Connection to DB
					F.ODBC.Connection!conCom.OpenCommonConnection
					'check to see if datatable exists
					F.Intrinsic.Control.If(V.DataTable.HTTPSettings.Exists)
						F.Data.DataTable.Close("HTTPSettings")
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Build("SELECT HTTPUSER, HTTPPASSWORD, PARTCLASS_URL FROM GCG_6625_SETTINGS WHERE ACTIVEENV = 'Y' AND CO_CODE = '{0}'", v.Caller.CompanyCode.Trim, v.Local.sSQL)
					F.Data.DataTable.CreateFromSQL("HTTPSettings", "conCom", v.Local.sSQL)
					F.Intrinsic.Control.If(V.DataTable.HTTPSettings.RowCount--,<>,-1)
						'decrypt and set the credentials to the corresponding global variables
						V.Local.sTemp2.Set(V.DataTable.HTTPSettings(0).HTTPUSER!FieldValTrim)
						F.Intrinsic.String.ConvertString2BA(V.Local.sTemp2, V.Local.baValue)
						F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp2)
						V.Global.sUsername.Set(V.Local.sTemp2.Trim)
						
						V.Local.sTemp2.Set(V.DataTable.HTTPSettings(0).HTTPPASSWORD!FieldValTrim)
						F.Intrinsic.String.ConvertString2BA(V.Local.sTemp2, V.Local.baValue)
						F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp2)
						V.Global.sPassword.Set(V.Local.sTemp2.Trim)
						
						V.Local.sTemp2.Set(V.DataTable.HTTPSettings(0).PARTCLASS_URL!FieldValTrim)
						F.Intrinsic.String.ConvertString2BA(V.Local.sTemp2, V.Local.baValue)
						F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp2)
						V.Global.sURL.Set(V.Local.sTemp2.Trim)
						
						F.ODBC.Connection!conCom.Close
					F.Intrinsic.Control.Else
						F.Intrinsic.UI.Msgbox("Configure HTTP Settings via System Support > Administration > HTTP Credentials (6625)", "Configure Settings")
						F.ODBC.Connection!conCom.Close
						F.Intrinsic.Control.ExitSub
					F.Intrinsic.Control.EndIf

					F.Communication.HTTPS.SetProperty("User", V.Global.sUsername)
					F.Communication.HTTPS.SetProperty("Password", V.Global.sPassword)

					'logic for HTTP request
					F.Intrinsic.String.Build("{0}\{1}_{2}_PartSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sXMLFileName)
					F.Intrinsic.File.Exists(V.Local.sXMLFileName, V.Local.bFileExists)
					F.Intrinsic.Control.If(V.Local.bFileExists,=,True)
						F.Intrinsic.File.File2String(V.Local.sXMLFileName, V.Local.sDataPacket)
						F.Intrinsic.String.Build("<?xml version="1.0" standalone="yes"?>{0}{1}", V.ASCII.13, V.ASCII.10, V.Local.sCRLF)
						F.Intrinsic.String.Replace(V.Local.sDataPacket, V.Local.sCRLF, "", V.Local.sDataPacket)
						F.Intrinsic.String.Replace(V.Local.sDataPacket, "MT_GSS_TA_Part_Classification_Request", "part:MT_GSS_TA_Part_Classification_Request", V.Local.sDataPacket)
						F.Intrinsic.String.Replace(V.Local.sDataPacket, "<soapenv:ENVELOPE1 xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">", "<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:part="urn:teconnect.com/Global_Trade/GSS/Part_Classification">", V.Local.sDataPacket)
						F.Intrinsic.String.Replace(V.Local.sDataPacket, "</soapenv:ENVELOPE1>", "</soapenv:Envelope>", V.Local.sDataPacket)
						F.Intrinsic.String.Replace(V.Local.sDataPacket, "BUS_KEY", "Record", V.Local.sDataPacket)
						F.Intrinsic.String.Build("{0}\{1}_{2}_PartSAPtoTA_Response.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sXMLResponseFile)
						
						Function.Communication.HTTPS.SetProperty("LOCALFILE", V.Local.sXMLResponseFile)
						F.Communication.HTTPS.SetProperty("PostData",V.Local.sDataPacket)
						Function.Communication.HTTPS.SetProperty("ContentType","application/xml")
						'set up the URL for each post as well
						'this will need to be the URL provided by TE
						'send the part classification XML to PIPO to get the information
						Function.Communication.HTTPS.Post(V.Global.sURL)
						
						'delete the file that was just created
						F.Intrinsic.File.DeleteFile(V.Local.sXMLFileName)
					F.Intrinsic.Control.EndIf

					
					'check to see if the response file exists
					F.Intrinsic.File.Exists(V.Local.sXMLResponseFile, V.Local.bFileExists)
					F.Intrinsic.Control.If(V.Local.bFileExists,=,True)
						F.Intrinsic.File.File2String(V.Local.sXMLResponseFile, V.Local.sResponsePacket)
						'remove the single quotes
						F.Intrinsic.String.Replace(V.Local.sResponsePacket, "<?xml version=1.0 encoding=UTF-8?>", "", V.Local.sResponsePacket)
						F.Intrinsic.String.Replace(V.Local.sResponsePacket, "<?xml version=1.0 encoding=UTF-8?>", "", V.Local.sResponsePacket)
						F.Intrinsic.String.Replace(V.Local.sResponsePacket, "xmlns:ns0='urn:teconnect.com/Global_Trade/GSS/Part_Classification'", "", V.Local.sResponsePacket)
						F.Intrinsic.String.Replace(V.Local.sResponsePacket, "<ns0:MT_TA_GSS_Part_Classification_Response >", "<MT_TA_GSS_Part_Classification_Response>",V.Local.sResponsePacket)
						F.Intrinsic.String.Replace(V.Local.sResponsePacket, "</ns0:MT_TA_GSS_Part_Classification_Response>", "</MT_TA_GSS_Part_Classification_Response>",V.Local.sResponsePacket)
						
						F.Intrinsic.File.String2File(V.Local.sXMLResponseFile, V.Local.sResponsePacket)
						
						'check to see if the datatable exists
						F.Intrinsic.Control.If(V.DataTable.dtTempPart.Exists,=,True)
							F.Data.DataTable.Close("dtTempPart")
						F.Intrinsic.Control.EndIf
						
						'create the response datatable
						F.Data.DataTable.CreateDatasetFromXML("dtTempPart", V.Local.sXMLResponseFile, True)
					F.Intrinsic.Control.EndIf
					
					'open Common Connection to DB
					F.ODBC.Connection!ComCon.OpenCommonConnection
					
					'insert into custom table in common company code
					F.Intrinsic.Control.For(V.Local.iCnt3,0, V.DataTable.dtTempPart.RowCount--,1)
						V.Local.sTCPN.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).PROD_ID!FieldValTrim)
						V.Local.sCountryCode.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).CTRY_CODE!FieldValTrim)
						
						F.Intrinsic.Control.If(V.Local.sCountryCode.Trim,=,"")
							V.Local.sCountryCode.Set("US")
						F.Intrinsic.Control.EndIf
						
						V.Local.sProdDesc.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).PROD_DESCRIPTION_COMPLIANCE!FieldValTrim)
						'V.Local.dImportDate.Set(V.DataTable.dtTempData(V.Local.iCnt).IM_CLASS_DATE!FieldVal)
						V.Local.sImportHTS.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).IM_HS1!FieldValTrim)
						V.Local.sExportHTS.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).EX_HS!FieldValTrim)
						V.Local.sECN.Set(V.DataTable.dtTempPart$PROD_CLASS(V.Local.iCnt3).ECN!FieldValTrim)
						
						'query common table to see if a record exists. if it does, update it. if it doesn't, don't update it
						F.Intrinsic.String.Build("SELECT * FROM GCG_6625_PART_CODE WHERE TCPN = '{0}'", V.Local.sTCPN.Trim, V.Local.sSQL)
						F.ODBC.Connection!ComCon.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
						F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
							'update the record
							F.Intrinsic.String.Build("UPDATE GCG_6625_PART_CODE SET COUNTRY = '{0}', IMPORT_HTS = '{1}', EXPORT_HTS = '{2}', ECCN = '{3}', COMPLIANCE_DESC = '{4}', PROCESSED = 0 WHERE TCPN = '{5}'", V.Local.sCountryCode.Trim, V.Local.sImportHTS.Trim, V.Local.sExportHTS.Trim, V.Local.sECN.Trim, V.Local.sProdDesc.PSQLFriendly, V.Local.sTCPN.Trim, V.Local.sSQL)
							F.ODBC.Connection!ComCon.Execute(V.Local.sSQL)
						F.Intrinsic.Control.Else
							'insert a record
							F.Intrinsic.String.Build("INSERT INTO GCG_6625_PART_CODE (TCPN, COUNTRY, IMPORT_HTS, EXPORT_HTS, ECCN, COMPLIANCE_DESC, PROCESSED) VALUES ('{0}', '{1}', '{2}', '{3}', '{4}', '{5}', 0)", v.Local.sTCPN.Trim, V.Local.sCountryCode.Trim, V.Local.sImportHTS.Trim, V.Local.sExportHTS.Trim, V.Local.sECN.Trim, V.Local.sProdDesc.PSQLFriendly, V.Local.sSQL)
							F.ODBC.Connection!ComCon.Execute(V.Local.sSQL)
						F.Intrinsic.Control.EndIf
						
						'delete the resposne file
						F.Intrinsic.File.DeleteFile(V.Local.sXMLResponseFile)
					F.Intrinsic.Control.Next(V.Local.iCnt3)
		
					F.ODBC.Connection!ComCon.Close
					'close the datatable
					F.Intrinsic.Control.If(V.DataTable.dtTempPart.Exists,=,True)
						F.Data.DataTable.Close("dtTempPart")
					F.Intrinsic.Control.EndIf
	 			F.Intrinsic.Control.Next(V.Local.iCnt2)
	 		F.Intrinsic.Control.Else
	 			F.Intrinsic.UI.Msgbox("The Staged Shipment you have selected does not have any lines. You must add lines to the Staged Shipment before XML can be sent to Trade Automation", "Missing Information")
	 			F.Intrinsic.UI.CloseWaitDialog
	 			F.Intrinsic.Control.ExitSub
	 		F.Intrinsic.Control.EndIf
	 		
	
	 		'query ord deliv table to see if a record exists. If it does, update it. Otherwise, delete it
			F.Intrinsic.String.Build("SELECT TRANS_ID FROM GCG_6625_ORD_DELIV WHERE PACKING_LIST = '{1}' AND TRANS_TYPE = 'D' AND PARTID IS NULL ", V.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, V.Local.sSQL)
			F.ODBC.Connection!con.ExecuteAndReturn(V.Local.sSQL, V.Local.sRet4)
			F.Intrinsic.Control.If(V.Local.sRet4.Trim,<>,"")
				F.Intrinsic.String.Build("UPDATE GCG_6625_ORD_DELIV SET STATUS3 = 'O' WHERE TRANS_ID = '{0}' AND PACKING_LIST = '{1}' AND TRANS_TYPE = 'D' AND PARTID IS NULL", v.Local.sOrderNo.Trim, V.Local.sPckNo.Trim, v.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
			F.Intrinsic.Control.Else
				F.Intrinsic.String.Build("INSERT INTO GCG_6625_ORD_DELIV (TRANS_ID, TRANS_TYPE, STATUS3, PACKING_LIST) VALUES ('{0}', 'D', 'O', '{1}')", V.Local.sOrderNo.Trim, v.Local.sPckNo.Trim, V.Local.sSQL)
				F.ODBC.Connection!con.Execute(V.Local.sSQL)
			F.Intrinsic.Control.EndIf
			
			'build XML File name			
			F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sFQP)
			F.Data.DataTable.SAVEDATASETTOXML("envelope", 1, V.Local.sFQP)

			'Callsub to get the HTTP settings
			F.Intrinsic.Control.CallSub(HTTPSettings)
			'callsub to process the XML
			F.Intrinsic.Control.CallSub(ProcessXML)
			
	 		'set the select value back to 0 for the order and change the status
	 		F.Data.DataTable.SetValue("dtShipments", V.Local.iRow, "SEL", 0, "TCS_STATUS", "Awaiting TCS Status")
	 		F.Data.DataTable.AcceptChanges("dtShipments")
	 		f.Intrinsic.UI.Sleep(1)
	 	F.Intrinsic.Control.Next(V.Local.iCnt)	
	 	
	 	F.Intrinsic.UI.CloseWaitDialog
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("You must select a row before you can submit Shipment XML to Trade Automation.", "Missing Selection")
	F.Intrinsic.Control.EndIf	
F.Intrinsic.Control.ElseIf(V.Local.sRet.Trim,=,"")
	F.Intrinsic.UI.Msgbox("The SAP Code has not been set up for this Company Code. You need to setup the associated SAP Code via System Support > Administration > TCS Maintenance (6625)", "Required Data")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf


F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickUpdateShipments.End

Program.Sub.MenuClickSelectShipments.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtShipments.RowCount--,>,-1)
	'set the SEL value to 1 for all records
	F.Data.DataTable.SetValue("dtShipments",-1, "SEL", 1)
	F.Data.DataTable.AcceptChanges("dtShipments")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickSelectShipments.End

Program.Sub.MenuClickDeselectShipments.Start
F.Intrinsic.Control.Try

'check to see if there are any records in the datatable
F.Intrinsic.Control.If(V.DataTable.dtShipments.RowCount--,>,-1)
	'set the SEL value to 0 for all records
	F.Data.DataTable.SetValue("dtShipments",-1, "SEL", 0)
	F.Data.DataTable.AcceptChanges("dtShipments")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.MenuClickDeselectShipments.End

Program.Sub.HTTPSettings.Start
F.Intrinsic.Control.Try
V.Local.baValue.Declare(ByteArray)
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sTemp.Declare(String)

'open Common Connection to DB
F.ODBC.Connection!conCom.OpenCommonConnection
'check to see if datatable exists
F.Intrinsic.Control.If(V.DataTable.HTTPSettings.Exists)
	F.Data.DataTable.Close("HTTPSettings")
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.If(V.Global.sSubmitType,=,"CUSTOMER", "OR",V.Global.sSubmitType,=,"VENDOR")
	'build query to pull username, password and url from custom table
	F.Intrinsic.String.Build("SELECT HTTPUSER, HTTPPASSWORD, PARTNER_URL FROM GCG_6625_SETTINGS WHERE ACTIVEENV = 'Y' AND CO_CODE = '{0}'", v.Caller.CompanyCode.Trim, v.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("HTTPSettings", "conCom", v.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.HTTPSettings.RowCount--,<>,-1)
		'decrypt and set the credentials to the corresponding global variables
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPUSER!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sUsername.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPPASSWORD!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sPassword.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).PARTNER_URL!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sURL.Set(V.Local.sTemp.Trim)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Configure HTTP Settings via System Support > Administration > HTTP Credentials (6625)", "Configure Settings")
		F.ODBC.Connection!conCom.Close
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.ElseIf(V.Global.sSubmitType,=,"ORDER")
	F.Intrinsic.String.Build("SELECT HTTPUSER, HTTPPASSWORD, ORDER_URL FROM GCG_6625_SETTINGS WHERE ACTIVEENV = 'Y' AND CO_CODE = '{0}'", v.Caller.CompanyCode.Trim, v.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("HTTPSettings", "conCom", v.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.HTTPSettings.RowCount--,<>,-1)
		'decrypt and set the credentials to the corresponding global variables
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPUSER!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sUsername.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPPASSWORD!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sPassword.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).ORDER_URL!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sURL.Set(V.Local.sTemp.Trim)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Configure HTTP Settings via System Support > Administration > HTTP Credentials (6625)", "Configure Settings")
		F.ODBC.Connection!conCom.Close
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ElseIf(v.Global.sSubmitType,=,"SHIPMENT")	
	F.Intrinsic.String.Build("SELECT HTTPUSER, HTTPPASSWORD, DELIV_URL FROM GCG_6625_SETTINGS WHERE ACTIVEENV = 'Y' AND CO_CODE = '{0}'", v.Caller.CompanyCode.Trim, v.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("HTTPSettings", "conCom", v.Local.sSQL)
	F.Intrinsic.Control.If(V.DataTable.HTTPSettings.RowCount--,<>,-1)
		'decrypt and set the credentials to the corresponding global variables
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPUSER!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sUsername.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).HTTPPASSWORD!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sPassword.Set(V.Local.sTemp.Trim)
		
		V.Local.sTemp.Set(V.DataTable.HTTPSettings(0).DELIV_URL!FieldValTrim)
		F.Intrinsic.String.ConvertString2BA(V.Local.sTemp, V.Local.baValue)
		F.Global.Encryption.Decrypt(V.Local.baValue,v.Local.sTemp)
		V.Global.sURL.Set(V.Local.sTemp.Trim)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox("Configure HTTP Settings via System Support > Administration > HTTP Credentials (6625)", "Configure Settings")
		F.ODBC.Connection!conCom.Close
		F.Intrinsic.Control.ExitSub
	F.Intrinsic.Control.EndIf

F.Intrinsic.Control.EndIf
	


F.ODBC.Connection!conCom.Close
F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.HTTPSettings.End

Program.Sub.ProcessXML.Start
F.Intrinsic.Control.Try
V.Local.sXMLFileName.Declare(String)
V.Local.sEndUserFQP.Declare(String)
V.Local.sCust.Declare(String)
V.Local.bFileExists.Declare(Boolean)
V.Local.sXMLResponseFile.Declare(String)
V.Local.sResponseData.Declare(String)
V.Local.sDataPacket.Declare(String)
V.Local.sFQP.Declare(String)
V.Local.sTADirectory.Declare(String)
V.Local.bDirExists.Declare(Boolean)

'check to see if the ta data transfer directory exists. If it doesn't create it
F.Intrinsic.String.Build("{0}\TA_DATA_TRANSFER\", V.Caller.FilesDir, V.Local.sTADirectory)
F.Intrinsic.File.DirExists(V.Local.sTADirectory, V.Local.bDirExists)
F.Intrinsic.Control.If(V.Local.bDirExists,=,False)
	F.Intrinsic.File.CreateDir(V.Local.sTADirectory)
F.Intrinsic.Control.EndIf

'set the username and password - will need to have a maintenance program for them to setup Username and Password for TA
F.Communication.HTTPS.SetProperty("User", V.Global.sUsername)
F.Communication.HTTPS.SetProperty("Password", V.Global.sPassword)

'logic for HTTP request
F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sXMLFileName)
F.Intrinsic.File.Exists(V.Local.sXMLFileName, V.Local.bFileExists)
F.Intrinsic.Control.If(V.Local.bFileExists,=,True)
	F.Intrinsic.File.File2String(V.Local.sXMLFileName, V.Local.sDataPacket)
	F.Intrinsic.String.Replace(V.Local.sDataPacket, "soapenv:ENVELOPE", "soapenv:Envelope", V.Local.sDataPacket)
	F.Intrinsic.String.Build("{0}\{1}_{2}_AdminSAPtoTA_Response.txt", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY, V.Local.sXMLResponseFile)
	
	Function.Communication.HTTPS.SetProperty("LOCALFILE", V.Local.sXMLResponseFile)
	F.Communication.HTTPS.SetProperty("PostData",V.Local.sDataPacket)
	Function.Communication.HTTPS.SetProperty("ContentType","application/xml")
	'set up the URL for each post as well
	'this will need to be the URL provided by TE
	Function.Communication.HTTPS.Post(v.Global.sURL)
	
	'copy the XML File and response file to custom folder
	F.Intrinsic.String.Build("{0}\TA_DATA_TRANSFER\{1}_{2}{3}_AdminSAPtoTA.xml", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY,V.Ambient.Time.FormatHhNnSs, V.Local.sFQP)
	F.Intrinsic.File.CopyFile(V.Local.sXMLFileName,V.Local.sFQP)	
	'delete the file that was just created
	F.Intrinsic.File.DeleteFile(V.Local.sXMLFileName)
	
	'copy the XML File and response file to custom folder
	F.Intrinsic.String.Build("{0}\TA_DATA_TRANSFER\{1}_{2}{3}_AdminSAPtoTA_Response.txt", V.Caller.FilesDir, V.Caller.User.Trim, V.Ambient.Date.FormatMMDDYYYY,V.Ambient.Time.FormatHhNnSs, V.Local.sFQP)
	F.Intrinsic.File.CopyFile(V.Local.sXMLResponseFile,V.Local.sFQP)	
	'delete the response .txt folder
	F.Intrinsic.File.DeleteFile(V.Local.sXMLResponseFile)
	
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox("XML File was not created correctly. Please try the request again.", "Missing XML")
	F.Intrinsic.Control.ExitSub
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	f.Communication.HTTPS.ReadProperty("TransferredData", V.Local.sResponseData)
	F.Intrinsic.UI.Msgbox(V.Local.sResponseData, "HTTPS Error")
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.ProcessXML.End

Program.Sub.f_Main_UnLoad.Start
F.Intrinsic.Control.Try

'close the connection
F.ODBC.Connection!con.Close

'end the program
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6625", "ProjectTitle", "TCS Dashboard", "Callback", "f_Main_UnLoad")
F.Intrinsic.Control.EndTry
Program.Sub.f_Main_UnLoad.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Global.bError)
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndIf
V.Global.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE)
	F.Intrinsic.Control.Else
		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.Comments.Start
${$5$}$20.1.8693.27812$}$1
${$6$}$acollins$}$20231121160852912$}$h98hERc2yV72q0GaUGlwSaoK/aefTdVkjusxYiJF5MDyyQcWUE5uqs4XwXzAcqAntiHiT24mj0PxN6upBUxvig==
Program.Sub.Comments.End